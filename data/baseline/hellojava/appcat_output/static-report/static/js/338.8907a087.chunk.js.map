{"version":3,"file":"static/js/338.8907a087.chunk.js","mappings":"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","sources":["shared/components/conditional-render/conditional-render.tsx","shared/components/simple-select/simple-select.tsx","shared/components/dependencies-table/dependencies-table.tsx","shared/components/simple-markdown/simple-markdown.tsx","shared/components/file-editor/file-editor.tsx","shared/components/table-controls/conditional-table-body.tsx","shared/components/table-controls/simple-pagination.tsx","shared/common/utils.ts","shared/components/domain-tables/components/issue-overview.tsx","shared/components/domain-tables/summary-table.tsx","shared/components/domain-tables/domain-table.tsx","shared/components/domain-tables/domain-tables.tsx","shared/components/violations-table/components/issue-overview.tsx","shared/components/violations-table/violations-table.tsx","shared/hooks/useSelectionState/useSelectionState.ts","shared/hooks/useModal/useModal.ts","shared/hooks/useTable/useTable.ts","shared/hooks/useTableControls/useTableControls.ts","shared/hooks/useToolbar/useToolbar.ts","utils/utils.ts"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface ConditionalRenderProps {\r\n  when: boolean;\r\n  then: any;\r\n  children: any;\r\n}\r\n\r\nexport const ConditionalRender: React.FC<ConditionalRenderProps> = ({ when, then, children }) => {\r\n  return when ? then : children || <></>;\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport {\r\n  Select,\r\n  SelectOption,\r\n  SelectOptionObject,\r\n  SelectOptionProps,\r\n  SelectProps,\r\n} from '@patternfly/react-core/deprecated';\r\n\r\nexport interface OptionWithValue<T = string> extends SelectOptionObject {\r\n  value: T;\r\n  props?: Partial<SelectOptionProps>; // Extra props for <SelectOption>, e.g. children, className\r\n}\r\n\r\ntype OptionLike = string | SelectOptionObject | OptionWithValue;\r\n\r\nexport interface ISimpleSelectProps\r\n  extends Omit<\r\n    SelectProps,\r\n    \"onChange\" | \"isOpen\" | \"onToggle\" | \"onSelect\" | \"selections\" | \"value\"\r\n  > {\r\n  \"aria-label\": string;\r\n  onChange: (selection: OptionLike) => void;\r\n  options: OptionLike[];\r\n  value?: OptionLike | OptionLike[];\r\n}\r\n\r\nexport const SimpleSelect: React.FC<ISimpleSelectProps> = ({\r\n  onChange,\r\n  options,\r\n  value,\r\n  placeholderText = \"Select...\",\r\n\r\n  ...props\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <Select\r\n      placeholderText={placeholderText}\r\n      isOpen={isOpen}\r\n      onToggle={(_, isExpanded) => setIsOpen(isExpanded)}\r\n      onSelect={(_, selection: OptionLike) => {\r\n        onChange(selection);\r\n        if (props.variant !== \"checkbox\") {\r\n          setIsOpen(false);\r\n        }\r\n      }}\r\n      selections={value}\r\n      {...props}\r\n    >\r\n      {options.map((option, index) => (\r\n        <SelectOption\r\n          key={`${index}-${option.toString()}`}\r\n          value={option}\r\n          {...(typeof option === \"object\" && (option as OptionWithValue).props)}\r\n        />\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n","import React, { useMemo, useState, useEffect, useCallback } from \"react\";\r\n\r\nimport {\r\n  Bullseye,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Label,\r\n  Split,\r\n  SplitItem,\r\n  SearchInput,\r\n  Title,\r\n  ToolbarItem,\r\n  ToolbarChip,\r\n  ToolbarChipGroup,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarToggleGroup,\r\n  ToolbarItemVariant,\r\n} from \"@patternfly/react-core\";\r\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\r\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\r\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\r\nimport { useDebounce } from \"usehooks-ts\";\r\n\r\nimport { DependencyDto } from \"@app/api/report\";\r\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\r\nimport { useAllApplications } from \"@app/queries/report\";\r\nimport {\r\n  SimpleSelect,\r\n  OptionWithValue,\r\n  SimplePagination,\r\n  ConditionalTableBody,\r\n} from \"@app/shared/components\";\r\nimport { useTable, useTableControls, useToolbar } from \"@app/shared/hooks\";\r\n\r\nconst compareToByColumn = (\r\n  a: DependencyDto,\r\n  b: DependencyDto,\r\n  columnIndex?: number\r\n) => {\r\n  switch (columnIndex) {\r\n    case 1: // name\r\n      return a.name.localeCompare(b.name);\r\n    case 3: // version\r\n      return a.version === b.version ? 0 : 1;\r\n    case 4: // indirect\r\n      return a.indirect === b.indirect ? 0 : 1;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\r\n  if (typeof option === \"string\") {\r\n    const toStringFn = () => option;\r\n    return {\r\n      value: option,\r\n      toString: toStringFn,\r\n      compareTo: (other: string | OptionWithValue) => {\r\n        return typeof other === \"string\"\r\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\r\n          : option === other.value;\r\n      },\r\n    };\r\n  } else {\r\n    const toStringFn = () => option.node as string;\r\n    return {\r\n      value: option.key,\r\n      toString: toStringFn,\r\n      compareTo: (other: string | OptionWithValue) => {\r\n        return typeof other === \"string\"\r\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\r\n          : option.key === other.value;\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\r\n  return {\r\n    key: option.value,\r\n    node: option.toString(),\r\n  };\r\n};\r\n\r\nexport interface IDependenciesTableProps {\r\n  applicationId?: string;\r\n}\r\n\r\nexport const DependenciesTable: React.FC<IDependenciesTableProps> = ({\r\n  applicationId,\r\n}) => {\r\n  const allApplicationsQuery = useAllApplications();\r\n\r\n  // Filters\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\r\n    \"labels\" | \"relationship\",\r\n    ToolbarChip\r\n  >();\r\n\r\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\r\n  const debouncedFilters = useDebounce<\r\n    Map<\"labels\" | \"relationship\", ToolbarChip[]>\r\n  >(filters, 100);\r\n\r\n  const dependencies = useMemo(() => {\r\n    if (!allApplicationsQuery.data || applicationId === undefined) {\r\n      return [];\r\n    }\r\n    return applicationId === ALL_APPLICATIONS_ID\r\n      ? allApplicationsQuery.data?.flatMap((a) => a.dependencies || [])\r\n      : allApplicationsQuery.data?.find((f) => f.id === applicationId)\r\n          ?.dependencies || [];\r\n  }, [allApplicationsQuery.data, applicationId]);\r\n\r\n  const allLabels: string[] = useMemo(() => {\r\n    return Array.from(new Set(dependencies?.flatMap((d) => d.labels)));\r\n  }, [dependencies]);\r\n\r\n  // Rows\r\n\r\n  const {\r\n    page: currentPage,\r\n    sortBy: currentSortBy,\r\n    changePage: onPageChange,\r\n    changeSortBy: onChangeSortBy,\r\n  } = useTableControls();\r\n\r\n  const filterItem = useCallback(\r\n    (item: DependencyDto) => {\r\n      let isFilterTextFilterCompliant = true;\r\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\r\n        isFilterTextFilterCompliant =\r\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\r\n          -1;\r\n      }\r\n\r\n      let isLabelFilterCompliant = true;\r\n      const selectedLabels = debouncedFilters.get(\"labels\") || [];\r\n      if (selectedLabels.length > 0) {\r\n        isLabelFilterCompliant = selectedLabels.some((f) =>\r\n          item.labels?.includes(f.key)\r\n        );\r\n      }\r\n\r\n      let isRelationshipFilterCompliant = true;\r\n      const selectedRelation = debouncedFilters.get(\"relationship\") || [];\r\n      if (selectedRelation.length > 0) {\r\n        isLabelFilterCompliant = selectedRelation.some(\r\n          (f) =>\r\n            (f.key === \"Direct\" && !item.indirect) ||\r\n            (f.key === \"Indirect\" && item.indirect)\r\n        );\r\n      }\r\n\r\n      return (\r\n        isFilterTextFilterCompliant &&\r\n        isLabelFilterCompliant &&\r\n        isRelationshipFilterCompliant\r\n      );\r\n    },\r\n    [debouncedFilterText, debouncedFilters]\r\n  );\r\n\r\n  const { pageItems, filteredItems } = useTable<DependencyDto>({\r\n    items: dependencies,\r\n    currentPage,\r\n    currentSortBy,\r\n    compareToByColumn,\r\n    filterItem,\r\n  });\r\n\r\n  // Reset pagination when application change\r\n  useEffect(() => {\r\n    onPageChange({ page: 1, perPage: currentPage.perPage });\r\n  }, [applicationId, onPageChange, currentPage.perPage]);\r\n\r\n  return (\r\n    <>\r\n      {applicationId === undefined ? (\r\n        <Bullseye>\r\n          <EmptyState>\r\n            <EmptyStateIcon icon={ArrowUpIcon} />\r\n            <Title headingLevel=\"h4\" size=\"lg\">\r\n              Select an application\r\n            </Title>\r\n            <EmptyStateBody>\r\n              Select an application whose data you want to get access to.\r\n            </EmptyStateBody>\r\n          </EmptyState>\r\n        </Bullseye>\r\n      ) : (\r\n        <>\r\n          <Toolbar\r\n            className=\"pf-m-toggle-group-container\"\r\n            collapseListedFiltersBreakpoint=\"xl\"\r\n            clearAllFilters={clearAllFilters}\r\n          >\r\n            <ToolbarContent>\r\n              <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\r\n                <ToolbarItem variant=\"search-filter\">\r\n                  <SearchInput\r\n                    value={filterText}\r\n                    onChange={(_, value) => setFilterText(value)}\r\n                    onClear={() => setFilterText(\"\")}\r\n                  />\r\n                </ToolbarItem>\r\n                <ToolbarGroup variant=\"filter-group\">\r\n                  <ToolbarFilter\r\n                    chips={filters.get(\"labels\")}\r\n                    deleteChip={(\r\n                      category: string | ToolbarChipGroup,\r\n                      chip: ToolbarChip | string\r\n                    ) => removeFilter(\"labels\", chip)}\r\n                    deleteChipGroup={() => setFilter(\"labels\", [])}\r\n                    categoryName={{ key: \"labels\", name: \"Labels\" }}\r\n                  >\r\n                    <SimpleSelect\r\n                      maxHeight={300}\r\n                      variant=\"checkbox\"\r\n                      aria-label=\"labels\"\r\n                      aria-labelledby=\"labels\"\r\n                      placeholderText=\"Labels\"\r\n                      value={filters.get(\"labels\")?.map(toOption)}\r\n                      options={allLabels.map(toOption)}\r\n                      onChange={(option) => {\r\n                        const optionValue = option as OptionWithValue<string>;\r\n\r\n                        const elementExists = (\r\n                          filters.get(\"labels\") || []\r\n                        ).some((f) => f.key === optionValue.value);\r\n                        let newElements: ToolbarChip[];\r\n                        if (elementExists) {\r\n                          newElements = (filters.get(\"labels\") || []).filter(\r\n                            (f) => f.key !== optionValue.value\r\n                          );\r\n                        } else {\r\n                          newElements = [\r\n                            ...(filters.get(\"labels\") || []),\r\n                            toToolbarChip(optionValue),\r\n                          ];\r\n                        }\r\n\r\n                        setFilter(\"labels\", newElements);\r\n                      }}\r\n                      hasInlineFilter\r\n                      onClear={() => setFilter(\"labels\", [])}\r\n                    />\r\n                  </ToolbarFilter>\r\n                </ToolbarGroup>\r\n                <ToolbarGroup variant=\"filter-group\">\r\n                  <ToolbarFilter\r\n                    chips={filters.get(\"relationship\")}\r\n                    deleteChip={(\r\n                      category: string | ToolbarChipGroup,\r\n                      chip: ToolbarChip | string\r\n                    ) => removeFilter(\"relationship\", chip)}\r\n                    deleteChipGroup={() => setFilter(\"relationship\", [])}\r\n                    categoryName={{ key: \"relationship\", name: \"Relation\" }}\r\n                  >\r\n                    <SimpleSelect\r\n                      maxHeight={300}\r\n                      variant=\"checkbox\"\r\n                      aria-label=\"relationship\"\r\n                      aria-labelledby=\"relationship\"\r\n                      placeholderText=\"Relation\"\r\n                      value={filters.get(\"relationship\")?.map(toOption)}\r\n                      options={[\"Direct\", \"Indirect\"].map(toOption)}\r\n                      onChange={(option) => {\r\n                        const optionValue = option as OptionWithValue<string>;\r\n\r\n                        const elementExists = (\r\n                          filters.get(\"relationship\") || []\r\n                        ).some((f) => f.key === optionValue.value);\r\n                        let newElements: ToolbarChip[];\r\n                        if (elementExists) {\r\n                          newElements = (\r\n                            filters.get(\"relationship\") || []\r\n                          ).filter((f) => f.key !== optionValue.value);\r\n                        } else {\r\n                          newElements = [\r\n                            ...(filters.get(\"relationship\") || []),\r\n                            toToolbarChip(optionValue),\r\n                          ];\r\n                        }\r\n\r\n                        setFilter(\"relationship\", newElements);\r\n                      }}\r\n                      hasInlineFilter\r\n                      onClear={() => setFilter(\"relationship\", [])}\r\n                    />\r\n                  </ToolbarFilter>\r\n                </ToolbarGroup>\r\n              </ToolbarToggleGroup>\r\n              <ToolbarItem\r\n                variant={ToolbarItemVariant.pagination}\r\n                align={{ default: \"alignRight\" }}\r\n              >\r\n                <SimplePagination\r\n                  count={filteredItems.length}\r\n                  params={currentPage}\r\n                  onChange={onPageChange}\r\n                  isTop={true}\r\n                />\r\n              </ToolbarItem>\r\n            </ToolbarContent>\r\n          </Toolbar>\r\n\r\n          <Table>\r\n            <Thead>\r\n              <Tr>\r\n                <Th\r\n                  width={50}\r\n                  sort={{\r\n                    columnIndex: 1,\r\n                    sortBy: { ...currentSortBy },\r\n                    onSort: onChangeSortBy,\r\n                  }}\r\n                  modifier=\"truncate\"\r\n                >\r\n                  Name\r\n                </Th>\r\n                <Th width={30}>Labels</Th>\r\n                <Th width={10} modifier=\"truncate\">\r\n                  Version\r\n                </Th>\r\n                <Th\r\n                  width={10}\r\n                  sort={{\r\n                    columnIndex: 4,\r\n                    sortBy: { ...currentSortBy },\r\n                    onSort: onChangeSortBy,\r\n                  }}\r\n                  modifier=\"truncate\"\r\n                >\r\n                  Relation\r\n                </Th>\r\n              </Tr>\r\n            </Thead>\r\n            <ConditionalTableBody\r\n              isNoData={filteredItems.length === 0}\r\n              numRenderedColumns={10}\r\n            >\r\n              {pageItems?.map((item, rowIndex) => {\r\n                return (\r\n                  <Tbody key={rowIndex}>\r\n                    <Tr>\r\n                      <Td>{item.name}</Td>\r\n                      <Td>\r\n                        <Split hasGutter>\r\n                          {item.labels?.map((label, index) => (\r\n                            <SplitItem key={index}>\r\n                              <Label isCompact color=\"blue\">\r\n                                {label.replace(\"konveyor.io/source=\", \"\")}\r\n                              </Label>\r\n                            </SplitItem>\r\n                          ))}\r\n                        </Split>\r\n                      </Td>\r\n                      <Td>{item.version}</Td>\r\n                      <Td>{item.indirect ? \"Indirect\" : \"Direct\"}</Td>\r\n                    </Tr>\r\n                  </Tbody>\r\n                );\r\n              })}\r\n            </ConditionalTableBody>\r\n          </Table>\r\n\r\n          <SimplePagination\r\n            count={filteredItems.length}\r\n            params={currentPage}\r\n            onChange={onPageChange}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";import ReactMarkdown from \"react-markdown\";\r\n\r\nimport { ReactMarkdownOptions } from \"react-markdown/lib/react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport \"github-markdown-css/github-markdown-light.css\";\r\n\r\ninterface ISimpleMarkdownProps extends ReactMarkdownOptions {}\r\n\r\nexport const SimpleMarkdown: React.FC<ISimpleMarkdownProps> = ({ ...rest }) => {\r\n  return (\r\n    <ReactMarkdown\r\n      className=\"markdown-body\"\r\n      remarkPlugins={[remarkGfm]}\r\n      linkTarget=\"_blank\"\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  CardTitle,\r\n  Drawer,\r\n  DrawerContent,\r\n  DrawerContentBody,\r\n  DrawerHead,\r\n  DrawerPanelContent,\r\n  EmptyState,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  Text,\r\n  Title,\r\n  TextContent,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport {\r\n  CodeEditor,\r\n  CodeEditorProps,\r\n  Language,\r\n} from \"@patternfly/react-code-editor\";\r\n\r\nimport InfoAltIcon from \"@patternfly/react-icons/dist/esm/icons/info-alt-icon\";\r\n\r\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\r\n\r\nimport { LinkDto } from \"@app/api/report\";\r\nimport { ConditionalRender, SimpleMarkdown } from \"@app/shared/components\";\r\nimport { getMarkdown } from \"@app/utils/utils\";\r\nimport { IssueProcessed } from \"@app/models/api-enriched\";\r\nimport { IncidentCoordinates } from \"@app/models/file\";\r\n\r\nconst codeLineRegex = /^\\s*([0-9]+)( {2})?(.*)$/;\r\n\r\ninterface IFileEditorProps {\r\n  name: string;\r\n  displayName: string;\r\n  codeSnip: string;\r\n  isLoading: boolean;\r\n  incidents: IncidentCoordinates[];\r\n  issue: IssueProcessed;\r\n  props?: Partial<\r\n    Omit<CodeEditorProps, \"ref\" | \"code\" | \"options\" | \"onEditorDidMount\">\r\n  >;\r\n}\r\n\r\nexport const FileEditor: React.FC<IFileEditorProps> = ({\r\n  name,\r\n  displayName,\r\n  codeSnip,\r\n  isLoading,\r\n  incidents,\r\n  issue,\r\n  props,\r\n}) => {\r\n  let absoluteToRelativeLineNum = (lineNum: number) => lineNum;\r\n  let relativeToAbsoluteLineNum = (lineNum: number) => lineNum;\r\n  const codeSnipNumberedLines = codeSnip.split(\"\\n\");\r\n  const codeSnipTrimmedLines: string[] = [];\r\n  let codeSnipStartLine = 1;\r\n  codeSnipNumberedLines.forEach((numberedLine, index) => {\r\n    const match = numberedLine.match(codeLineRegex);\r\n    if (match && !isNaN(Number(match[1]))) {\r\n      const lineNum = Number(match[1]);\r\n      if (index === 0) codeSnipStartLine = lineNum;\r\n      const lineCode = match[3] || \"\";\r\n      codeSnipTrimmedLines.push(lineCode);\r\n    }\r\n  });\r\n  codeSnip = codeSnipTrimmedLines.join(\"\\n\");\r\n  absoluteToRelativeLineNum = (lineNum: number) => lineNum - (codeSnipStartLine - 1);\r\n  relativeToAbsoluteLineNum = (lineNum: number) => lineNum + (codeSnipStartLine - 1);\r\n\r\n  // Editor\r\n  const editorRef = useRef<monacoEditor.editor.IStandaloneCodeEditor>();\r\n  const monacoRef = useRef<typeof monacoEditor>();\r\n  useEffect(() => {\r\n    return () => {\r\n      monacoRef.current?.editor.getModels().forEach((model) => model.dispose());\r\n      editorRef.current?.dispose();\r\n    };\r\n  }, [editorRef, monacoRef]);\r\n\r\n  // Disposables\r\n  const [disposables, setDisposables] = useState<monacoEditor.IDisposable[]>(\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    return () => {\r\n      disposables.forEach((disposable) => disposable && disposable.dispose());\r\n    };\r\n  }, [disposables]);\r\n\r\n  // const drawerRef = React.useRef<any>();\r\n  // const [isDrawerExpanded, setIsDrawerExpanded] = useState(\r\n  //   incidents ? true : false\r\n  // );\r\n  // const onDrawerExpand = () => {\r\n  //   drawerRef.current && drawerRef.current.focus();\r\n  // };\r\n\r\n  const fileExtension = name?.split('.')?.pop();\r\n\r\n  /**\r\n   * Adds a hover text to the hint line\r\n   */\r\n  const addHover = (\r\n    monaco: typeof monacoEditor,\r\n    incidents: IncidentCoordinates[],\r\n    links: LinkDto[]\r\n  ) => {\r\n    return incidents.map((inc) => {\r\n      return monaco.languages.registerHoverProvider(\"*\", {\r\n        provideHover: (model, position) => {\r\n          if (position.lineNumber !== inc.lineNumber) {\r\n            return undefined;\r\n          }\r\n\r\n          return {\r\n            range: new monaco.Range(inc.lineNumber!, 1, inc.lineNumber!, 1),\r\n            contents: [\r\n              {\r\n                value: getMarkdown(inc.message, links),\r\n              },\r\n            ],\r\n          };\r\n        },\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Underlines the hint line\r\n   */\r\n  const addMarkers = (\r\n    monaco: typeof monacoEditor,\r\n    incidents: IncidentCoordinates[]\r\n  ) => {\r\n    const markers = incidents\r\n      .filter((inc) => inc.lineNumber && inc.lineNumber !== 0)\r\n      ?.map((inc) => {\r\n        const marker: monacoEditor.editor.IMarkerData = {\r\n          startLineNumber: absoluteToRelativeLineNum(inc.lineNumber),\r\n          endLineNumber: absoluteToRelativeLineNum(inc.lineNumber),\r\n          startColumn: 0,\r\n          endColumn: 1000,\r\n          message: issue.description,\r\n          severity: monaco.MarkerSeverity.Warning,\r\n        }\r\n        return marker\r\n      })\r\n\r\n    const model = monaco.editor.getModels()[0];\r\n    monaco.editor.setModelMarkers(model, \"*\", markers);\r\n  };\r\n\r\n  const onEditorDidMount = (\r\n    editor: monacoEditor.editor.IStandaloneCodeEditor,\r\n    monaco: typeof monacoEditor\r\n  ) => {\r\n    editor.layout();\r\n    editor.focus();\r\n    monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\r\n\r\n    let newDisposables: monacoEditor.IDisposable[] = [];\r\n\r\n    // Add markers\r\n    addMarkers(monaco, incidents);\r\n\r\n    // Add hovers\r\n    const hovers = addHover(monaco, incidents, issue.links);\r\n    newDisposables = newDisposables.concat(hovers);\r\n\r\n    setDisposables(newDisposables);\r\n\r\n    editorRef.current = editor;\r\n    monacoRef.current = monaco;\r\n  };\r\n\r\n  return (\r\n    <Drawer isExpanded={true} isInline>\r\n      <DrawerContent\r\n        panelContent={\r\n          <DrawerPanelContent\r\n            isResizable\r\n          >\r\n            <DrawerHead>\r\n              <Card isLarge>\r\n                <CardHeader>\r\n                  <CardTitle>\r\n                    <TextContent>\r\n                      <Text component=\"h1\">{issue.name}</Text>\r\n                    </TextContent>\r\n                    <TextContent>\r\n                      <Text component=\"small\">{issue.ruleID}</Text>\r\n                    </TextContent>\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                  {issue.description && (\r\n                    <SimpleMarkdown\r\n                      children={getMarkdown(\r\n                        issue.description,\r\n                        issue.links,\r\n                      )}\r\n                    />\r\n                  )}\r\n                </CardBody>\r\n              </Card>\r\n            </DrawerHead>\r\n          </DrawerPanelContent>\r\n        }\r\n      >\r\n        <DrawerContentBody>\r\n          <ConditionalRender\r\n            when={isLoading}\r\n            then={<span>Loading...</span>}\r\n          >\r\n            {\r\n              codeSnip === \"\" ? (<EmptyState variant={EmptyStateVariant.lg}>\r\n                <EmptyStateIcon icon={InfoAltIcon} />\r\n                <Title headingLevel=\"h4\" size=\"md\">\r\n                  Code snippet unavailable\r\n                </Title>\r\n              </EmptyState>) : (<CodeEditor\r\n                isDarkTheme\r\n                isLineNumbersVisible\r\n                isReadOnly={true}\r\n                isMinimapVisible\r\n                isLanguageLabelVisible\r\n                isDownloadEnabled={false}\r\n                title={displayName}\r\n                code={codeSnip ? codeSnip : \"\"}\r\n                language={Object.values(Language).find(\r\n                  (l) => l === fileExtension?.toLowerCase()\r\n                )}\r\n                options={{\r\n                  glyphMargin: true,\r\n                  \"semanticHighlighting.enabled\": true,\r\n                  renderValidationDecorations: \"on\",\r\n                  lineNumbers: (lineNum: number) =>\r\n                    String(relativeToAbsoluteLineNum(lineNum))\r\n                }}\r\n                onEditorDidMount={(\r\n                  editor: monacoEditor.editor.IStandaloneCodeEditor,\r\n                  monaco: typeof monacoEditor\r\n                ) => {\r\n                  onEditorDidMount(editor, monaco);\r\n                }}\r\n                height={`${window.innerHeight - 300}px`}\r\n                {...props}\r\n              />)\r\n\r\n            }\r\n          </ConditionalRender>\r\n        </DrawerContentBody>\r\n      </DrawerContent>\r\n    </Drawer>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Bullseye,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  EmptyStateVariant,\r\n  Spinner,\r\n  Title,\r\n} from '@patternfly/react-core';\r\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\r\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\r\nimport { Tbody, Td, Tr } from '@patternfly/react-table';\r\nimport { global_danger_color_200 as globalDangerColor200 } from '@patternfly/react-tokens';\r\n\r\nexport interface IConditionalTableBodyProps {\r\n  numRenderedColumns: number;\r\n  isLoading?: boolean;\r\n  isError?: boolean;\r\n  isNoData?: boolean;\r\n  errorEmptyState?: React.ReactNode;\r\n  noDataEmptyState?: React.ReactNode;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const ConditionalTableBody: React.FC<IConditionalTableBodyProps> = ({\r\n  numRenderedColumns,\r\n  isLoading = false,\r\n  isError = false,\r\n  isNoData = false,\r\n  errorEmptyState = null,\r\n  noDataEmptyState = null,\r\n  children,\r\n}) => {\r\n  const error = (\r\n    <EmptyState variant={EmptyStateVariant.sm}>\r\n      <EmptyStateIcon icon={ExclamationCircleIcon} color={globalDangerColor200.value} />\r\n      <Title headingLevel=\"h2\" size=\"lg\">\r\n        Unable to connect\r\n      </Title>\r\n      <EmptyStateBody>\r\n        There was an error retrieving data. Check your connection and try again.\r\n      </EmptyStateBody>\r\n    </EmptyState>\r\n  );\r\n\r\n  const noData = (\r\n    <EmptyState variant={EmptyStateVariant.sm}>\r\n      <EmptyStateIcon icon={CubesIcon} />\r\n      <Title headingLevel=\"h2\" size=\"lg\">\r\n        No data available\r\n      </Title>\r\n      <EmptyStateBody>No data available to be shown here.</EmptyStateBody>\r\n    </EmptyState>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Tbody>\r\n          <Tr>\r\n            <Td colSpan={numRenderedColumns}>\r\n              <Bullseye>\r\n                <Spinner size=\"xl\" />\r\n              </Bullseye>\r\n            </Td>\r\n          </Tr>\r\n        </Tbody>\r\n      ) : isError ? (\r\n        <Tbody aria-label=\"Table error\">\r\n          <Tr>\r\n            <Td colSpan={numRenderedColumns}>\r\n              <Bullseye>{errorEmptyState || error}</Bullseye>\r\n            </Td>\r\n          </Tr>\r\n        </Tbody>\r\n      ) : isNoData ? (\r\n        <Tbody aria-label=\"Table no data\">\r\n          <Tr>\r\n            <Td colSpan={numRenderedColumns}>\r\n              <Bullseye>{noDataEmptyState || noData}</Bullseye>\r\n            </Td>\r\n          </Tr>\r\n        </Tbody>\r\n      ) : (\r\n        children\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nimport { Pagination, PaginationVariant, ToggleTemplate } from '@patternfly/react-core';\r\n\r\nexport interface ISimplePaginationProps {\r\n  count: number;\r\n  params: {\r\n    perPage?: number;\r\n    page?: number;\r\n  };\r\n\r\n  isTop?: boolean;\r\n  isCompact?: boolean;\r\n  perPageOptions?: number[];\r\n  onChange: ({ page, perPage }: { page: number; perPage: number }) => void;\r\n}\r\n\r\nexport const SimplePagination: React.FC<ISimplePaginationProps> = ({\r\n  count,\r\n  params,\r\n  isTop,\r\n  isCompact,\r\n  perPageOptions,\r\n  onChange,\r\n}) => {\r\n  const mapPerPageOptions = (options: number[]) => {\r\n    return options.map((option) => ({\r\n      title: String(option),\r\n      value: option,\r\n    }));\r\n  };\r\n\r\n  const getPerPage = () => {\r\n    return params.perPage || 10;\r\n  };\r\n\r\n  return (\r\n    <Pagination\r\n      itemCount={count}\r\n      page={params.page || 1}\r\n      perPage={getPerPage()}\r\n      onPageInput={(_, page) => {\r\n        onChange({ page, perPage: getPerPage() });\r\n      }}\r\n      onSetPage={(_, page) => {\r\n        onChange({ page, perPage: getPerPage() });\r\n      }}\r\n      onPerPageSelect={(_, perPage) => {\r\n        onChange({ page: 1, perPage });\r\n      }}\r\n      isCompact={isTop || isCompact}\r\n      widgetId=\"pagination-options-menu\"\r\n      variant={isTop ? PaginationVariant.top : PaginationVariant.bottom}\r\n      perPageOptions={mapPerPageOptions(perPageOptions || [10, 20, 50, 100])}\r\n      toggleTemplate={(props) => <ToggleTemplate {...props} />}\r\n    />\r\n  );\r\n};\r\n","import {\r\n  TableData,\r\n} from \"@app/shared/components\";\r\n\r\n\r\nconst LabelDisplayTextMap = {\r\n  'azure-readiness': 'Azure Readiness',\r\n  'credential-migration': 'Credential Migration',\r\n  'storage-migration': 'Storage Migration',\r\n  'messaging-service-migration': 'Messaging Service Migration',\r\n  'cache-service-migration': 'Cache Service Migration',\r\n  'database-migration': 'Database Migration',\r\n  'eap-migration': 'EAP Migration',\r\n  'spring-migration': 'Spring Migration',\r\n  'scheduled-job-migration': 'Scheduled Job Migration',\r\n  'service-binding': 'Service Binding',\r\n  'region-configuration': 'Region Configuration',\r\n  'cloud-native': 'Cloud Native',\r\n  'configuration-management': 'Configuration Management',\r\n  'file-system-management': 'File System Management',\r\n  'logging-management': 'Logging Management',\r\n  'session-management': 'Session Management',\r\n  'embedded-cache-management': 'Embedded Cache Management',\r\n  'local-resource-access': 'Local Resource Access',\r\n  'local-credential': 'Local Credential',\r\n  'remote-communication': 'Remote Communication',\r\n  'java-native-code': 'Java Native Code',\r\n  'os-compatibility': 'OS Compatibility',\r\n  'java-modernization': 'Java Modernization',\r\n  'java-version-upgrade': 'Java Version Upgrade',\r\n  'framework-upgrade': 'Framework Upgrade',\r\n  'deprecated-apis': 'Deprecated APIs',\r\n  'encoding-standards': 'Encoding Standards',\r\n  'aws-credentials': 'AWS Credentials',\r\n  'aws-region-configuration': 'AWS Region Configuration',\r\n  'aws-s3': 'AWS S3',\r\n  'aws-sqs': 'AWS SQS ',\r\n  'aws-secrets-manager': 'AWS Secrets Manager',\r\n  'redis': 'Redis',\r\n  'mongodb': 'MongoDB',\r\n  'local-file-system': 'Local File System',\r\n  'kafka': 'Kafka',\r\n  'rabbitmq': 'RabbitMQ',\r\n  'activemq-artemis': 'ActiveMQ Artemis',\r\n  'spring-amqp': 'Spring AMQP',\r\n  'azure-service-bus': 'Azure Service Bus',\r\n  'environment-variables': 'Environment Variables',\r\n  'tanzu-application-service': 'Tanzu Application Service',\r\n  'jboss-eap': 'JBoss EAP',\r\n  'jetty-jndi-resources': 'Jetty JNDI Resources',\r\n  'quartz-scheduler': 'Quartz Scheduler',\r\n  'tomcat-jndi-resources': 'Tomcat JNDI Resources',\r\n  'mysql': 'MySQL',\r\n  'postgresql': 'PostgreSQL',\r\n  'microsoft-sql': 'Microsoft SQL',\r\n  'cassandra': 'Cassandra',\r\n  'mariadb': 'MariaDB',\r\n  'corba': 'CORBA',\r\n  'jni-native-code': 'JNI Native Code',\r\n  'localhost': 'Localhost',\r\n  'java-mail': 'JavaMail',\r\n  'http-session': 'HTTP Session',\r\n  'java-socket': 'Java Socket',\r\n  'jakartaee-to-azure': 'JakartaEE to Azure',\r\n  'spring-amqp-rabbitmq': 'Spring AMQP RabbitMQ',\r\n  'spring-jms-rabbitmq': 'Spring JMS RabbitMQ',\r\n  'apm-migration': 'APM Migration',\r\n  'auth-migration': 'Auth Migration',\r\n  'java-client-app': 'Java Client App',\r\n  'spring-cloud': 'Spring Cloud',\r\n  'spring-cloud-vault': 'Spring Cloud Vault',\r\n  'apm-newrelic': 'APM NewRelic',\r\n  'apm-elastic': 'APM Elastic',\r\n  'apm-dynatrace': 'APM Dynatrace',\r\n  'hardcode-ip': 'Hardcode IP',\r\n  'zipkin': 'Zipkin',\r\n  'logstash': 'Logstash',\r\n  'splunk': 'Splunk',\r\n  'javax-swing': 'Java Swing',\r\n  'javafx': 'JavaFX',\r\n  'saml': 'SAML',\r\n  'opensaml': 'OpenSAML',\r\n};\r\n\r\nexport function convertLabelToDisplayText(label: keyof typeof LabelDisplayTextMap | string): string {\r\n  return LabelDisplayTextMap[label as keyof typeof LabelDisplayTextMap] || label;\r\n}\r\n\r\nexport interface CriticalityData {\r\n  criticality: string;\r\n  count: number;\r\n}\r\n\r\nexport const CRITIALITIES = ['mandatory', 'potential', 'optional'];\r\n\r\nexport function getIssuesCriticality(issues: TableData[]): string[] {\r\n  const critialities: CriticalityData[] = CRITIALITIES\r\n    .map(c => {\r\n      return {\r\n        criticality: c,\r\n        count: issues.filter(issue => issue.criticality?.toLowerCase() === c.toLowerCase()).length || 0,\r\n      }\r\n    })\r\n    .filter(criticalityData => criticalityData.count > 0);\r\n  // const criticality = critialities.length === 1 ? [critialities[0].criticality]\r\n  //   : critialities.map(criticalityData => `${criticalityData.criticality}: ${criticalityData.count}  `);\r\n\r\n  // return criticality;\r\n  return critialities.map(criticalityData => `${criticalityData.criticality}: ${criticalityData.count}  `);\r\n}","import React, { useState, useCallback, useMemo } from \"react\";\r\nimport { useDebounce } from \"usehooks-ts\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Grid,\r\n  GridItem,\r\n  Stack,\r\n  StackItem,\r\n  Truncate,\r\n  ToolbarItem,\r\n  SearchInput,\r\n  CardHeader,\r\n  CardTitle,\r\n  Text,\r\n  TextContent,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarToggleGroup,\r\n  ToolbarItemVariant,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\r\n\r\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\r\n\r\nimport { useTable, useTableControls } from \"@app/shared/hooks\";\r\n\r\nimport { IssueProcessed } from \"@app/models/api-enriched\";\r\nimport {\r\n  ConditionalTableBody,\r\n  SimpleMarkdown,\r\n  SimplePagination,\r\n} from \"@app/shared/components\";\r\nimport { getMarkdown } from \"@app/utils/utils\";\r\nimport { DispersedFile } from \"@app/models/file\";\r\nimport { useDispersedFiles } from \"@app/queries/report\";\r\n\r\ninterface IIssueOverviewProps {\r\n  issue: IssueProcessed;\r\n  onShowFile: (file: DispersedFile, issue: IssueProcessed) => void;\r\n}\r\n\r\ninterface TableData extends DispersedFile {}\r\n\r\nexport const compareByColumnIndex = (\r\n  a: TableData,\r\n  b: TableData,\r\n  columnIndex?: number\r\n) => {\r\n  switch (columnIndex) {\r\n    case 0: // name\r\n      return a.name.localeCompare(b.name);\r\n    case 1: // count\r\n      return a.totalIncidents - b.totalIncidents;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nexport const IssueOverview: React.FC<IIssueOverviewProps> = ({\r\n  issue,\r\n  onShowFile,\r\n}) => {\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\r\n  const dispersedFilesQuery = useDispersedFiles(issue);\r\n\r\n  const items: TableData[] = useMemo(() => \r\n    dispersedFilesQuery.data?.filter((f) => f.totalIncidents !== 0) || [], \r\n  [dispersedFilesQuery.data])\r\n\r\n  const filterItem = useCallback(\r\n    (item: TableData) => {\r\n      let isFilterTextFilterCompliant = true;\r\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\r\n        isFilterTextFilterCompliant =\r\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\r\n          -1;\r\n      }\r\n      return isFilterTextFilterCompliant;\r\n    },\r\n    [debouncedFilterText]\r\n  );\r\n\r\n  const {\r\n    page: currentPage,\r\n    sortBy: currentSortBy,\r\n    changePage: onPageChange,\r\n    changeSortBy: onChangeSortBy,\r\n  } = useTableControls();\r\n\r\n  const { pageItems, filteredItems } = useTable<TableData>({\r\n    items,\r\n    filterItem,\r\n    currentPage: currentPage,\r\n    currentSortBy: currentSortBy,\r\n    compareToByColumn: compareByColumnIndex,\r\n  });\r\n\r\n  return (\r\n    <Stack hasGutter>\r\n      <StackItem>\r\n        <Grid hasGutter>\r\n          <GridItem md={5}>\r\n            <Toolbar\r\n              className=\"pf-m-toggle-group-container\"\r\n              collapseListedFiltersBreakpoint=\"xl\"\r\n            >\r\n              <ToolbarContent>\r\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\r\n                  <ToolbarItem variant=\"search-filter\">\r\n                    <SearchInput\r\n                      value={filterText}\r\n                      onChange={(_, value) => setFilterText(value)}\r\n                      onClear={() => setFilterText(\"\")}\r\n                    />\r\n                  </ToolbarItem>\r\n                </ToolbarToggleGroup>\r\n                <ToolbarItem\r\n                  variant={ToolbarItemVariant.pagination}\r\n                  align={{ default: \"alignRight\" }}\r\n                >\r\n                  <SimplePagination\r\n                    count={filteredItems.length}\r\n                    params={currentPage}\r\n                    onChange={onPageChange}\r\n                    isTop={true}\r\n                  />\r\n                </ToolbarItem>\r\n              </ToolbarContent>\r\n            </Toolbar>\r\n\r\n            <Table>\r\n              <Thead>\r\n                <Tr>\r\n                  <Th\r\n                    width={80}\r\n                    sort={{\r\n                      columnIndex: 1,\r\n                      sortBy: { ...currentSortBy },\r\n                      onSort: onChangeSortBy,\r\n                    }}\r\n                  >\r\n                    File\r\n                  </Th>\r\n                  <Th width={20}>lineOfCodeImpacted</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <ConditionalTableBody\r\n                isNoData={filteredItems.length === 0}\r\n                numRenderedColumns={10}\r\n              >\r\n                {pageItems?.map((item, rowIndex) => {\r\n                  return (\r\n                    <Tbody key={rowIndex}>\r\n                      <Tr>\r\n                        <Td>\r\n                          <FileLink\r\n                            file={item.name}\r\n                            defaultText={item.displayName}\r\n                            onClick={() => onShowFile(item, issue)}\r\n                          />\r\n                        </Td>\r\n                        <Td>{item.totalIncidents}</Td>\r\n                      </Tr>\r\n                    </Tbody>\r\n                  );\r\n                })}\r\n              </ConditionalTableBody>\r\n            </Table>\r\n\r\n            <SimplePagination\r\n              count={filteredItems.length}\r\n              params={currentPage}\r\n              onChange={onPageChange}\r\n            />\r\n          </GridItem>\r\n          <GridItem md={7}>\r\n            <Card isCompact isFullHeight>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  <TextContent>\r\n                    <>\r\n                      <Text component=\"h2\">{issue.ruleID}</Text>\r\n                    </>\r\n                  </TextContent>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <SimpleMarkdown\r\n                  children={getMarkdown(issue.description || \"\", issue.links)}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </GridItem>\r\n        </Grid>\r\n      </StackItem>\r\n    </Stack>\r\n  );\r\n};\r\n\r\ninterface IFileLinkProps {\r\n  file: string;\r\n  defaultText: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const FileLink: React.FC<IFileLinkProps> = ({\r\n  file,\r\n  defaultText,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <>\r\n      {file ? (\r\n        <Button variant=\"link\" isInline onClick={onClick}>\r\n          <Truncate content={defaultText || file} />\r\n        </Button>\r\n      ) : (\r\n        defaultText\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useMemo, useState } from \"react\";\r\nimport { convertLabelToDisplayText, getIssuesCriticality } from \"../../common/utils\";\r\n\r\n\r\nimport {\r\n  Button,\r\n  Modal,\r\n  Tab,\r\n  Tabs,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport { IssueProcessed } from \"@app/models/api-enriched\";\r\nimport { useCodeSnip } from \"@app/queries/report\";\r\nimport {\r\n  FileEditor,\r\n  TableData\r\n} from \"@app/shared/components\";\r\nimport {\r\n  useModal,\r\n} from \"@app/shared/hooks\";\r\n\r\nimport {\r\n    Table,\r\n    Thead,\r\n    Tr,\r\n    Th,\r\n    Tbody,\r\n    Td,\r\n    TreeRowWrapper,\r\n    TdProps,\r\n  } from \"@patternfly/react-table\";\r\n\r\nimport { IssueOverview } from \"./components/issue-overview\";\r\nimport { DispersedFile } from \"@app/models/file\";\r\n\r\n\r\nconst columnNames = {\r\n    Issue: \"Issue Category\",\r\n    Criticality: \"Criticality\",\r\n    lineOfCodeImpacted: \"lineOfCodeImpacted\",\r\n  };\r\n\r\ninterface SelectedFile {\r\n  file: DispersedFile;\r\n  issue: IssueProcessed;\r\n}\r\n\r\nexport interface ISummaryTableProps {\r\n  issues: TableData[];\r\n  domain: string;\r\n}\r\n\r\nexport const SummaryTable: React.FC<ISummaryTableProps> = ({\r\n  issues,\r\n  domain,\r\n}) => {\r\n  const [fileEditorTabId, setFileEditorTabId] = useState<number>(0);\r\n  const [selectedFile, setSelectedFile] = useState<DispersedFile>({} as DispersedFile);\r\n\r\n  const codeSnipQuery = useCodeSnip(selectedFile, fileEditorTabId);\r\n\r\n  const codeSnip: string = useMemo(() => codeSnipQuery.data || \"\", [codeSnipQuery.data])\r\n\r\n  const {\r\n    data: fileModalData,\r\n    isOpen: isFileModalOpen,\r\n    action: fileModalAction,\r\n    open: openFileModal,\r\n    close: closeFileModal,\r\n  } = useModal<\"showFile\", SelectedFile>();\r\n\r\n  const [expandedNodeNames, setExpandedNodeNames] = React.useState<string[]>([\r\n  ]);\r\n\r\n  function renderIssueOverview(issue: TableData, level: number, rowIndex: number, isHidden: boolean) {\r\n    let posinset = 1;\r\n    const results: React.ReactNode[] = [];\r\n    const rowKey = `${domain}-${issue.name}-overview-${rowIndex}`; \r\n    const isExpanded = expandedNodeNames.includes(rowKey);\r\n    const treeRow: TdProps[\"treeRow\"] = {\r\n      onCollapse: () =>\r\n        setExpandedNodeNames((prevExpanded) => {\r\n          const otherExpandedNodeNames = prevExpanded.filter(\r\n            (name) => name !== rowKey\r\n          );\r\n          return isExpanded\r\n            ? otherExpandedNodeNames\r\n            : [...otherExpandedNodeNames, rowKey];\r\n        }),\r\n      rowIndex,\r\n      props: {\r\n        isExpanded,\r\n        isHidden,\r\n        \"aria-level\": level,\r\n        \"aria-posinset\": posinset,\r\n        \"aria-setsize\": 0,\r\n      },\r\n    };\r\n    const result: React.ReactNode =\r\n    <TreeRowWrapper key={rowKey} row={{ props: treeRow.props }}>\r\n      <Td colSpan={3}>\r\n        <div className=\"pf-v5-u-m-sm\">\r\n          <IssueOverview\r\n            issue={issue}\r\n            onShowFile={(file, issue) => {\r\n              openFileModal(\"showFile\", {\r\n                file,\r\n                issue,\r\n              })\r\n              setSelectedFile(file)\r\n            }\r\n            }\r\n          />\r\n        </div>\r\n      </Td>\r\n    </TreeRowWrapper>;\r\n\r\n    results.push(result);\r\n    return results;\r\n  }\r\n\r\n  function renderIssues(issues: TableData[], level: number, rowIndex: number, isHidden: boolean) {\r\n    let posinset = 1;\r\n    const results: React.ReactNode[] = [];\r\n\r\n    issues.forEach((issue) => {\r\n      const rowKey = `${domain}-${issue.name}-${rowIndex}`; \r\n      const isExpanded = expandedNodeNames.includes(rowKey);\r\n      const treeRow: TdProps[\"treeRow\"] = {\r\n          onCollapse: () =>\r\n            setExpandedNodeNames((prevExpanded) => {\r\n              const otherExpandedNodeNames = prevExpanded.filter(\r\n                (name) => name !== rowKey\r\n              );\r\n              return isExpanded\r\n                ? otherExpandedNodeNames\r\n                : [...otherExpandedNodeNames, rowKey];\r\n            }),\r\n          rowIndex,\r\n          props: {\r\n            isExpanded,\r\n            isHidden,\r\n            \"aria-level\": level,\r\n            \"aria-posinset\": posinset,\r\n            \"aria-setsize\": 1,\r\n          },\r\n        };\r\n\r\n      const result: React.ReactNode =\r\n        <TreeRowWrapper key={rowKey} row={{ props: treeRow.props }}>\r\n          <Td dataLabel={columnNames.Issue} treeRow={treeRow}>\r\n            {issue.name}\r\n          </Td>\r\n          <Td dataLabel={columnNames.Criticality}>{issue.criticality}</Td>\r\n          <Td dataLabel={columnNames.lineOfCodeImpacted}>{issue.totalIncidents}</Td>\r\n        </TreeRowWrapper>;\r\n\r\n      results.push(result);\r\n      const childRows = renderIssueOverview(issue, level + 1, rowIndex + 1, !isExpanded || isHidden);\r\n      results.push(...childRows);\r\n      rowIndex = rowIndex + childRows.length + 1;\r\n      posinset= posinset + 1;\r\n    });\r\n    return results;\r\n  }\r\n\r\n\r\n  function renderSubCategories(category: string, subCategories: string[], level: number, rowIndex: number, isHidden: boolean) {\r\n    let posinset = 1;\r\n    const results: React.ReactNode[] = [];\r\n\r\n    subCategories.forEach((subCategory) => {\r\n      const rowKey = `${domain}-${category}-${subCategory}-${rowIndex}`; \r\n\r\n      const totalIncidents = issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category && issue.issueSubCategory === subCategory)\r\n      .map(issue => issue.totalIncidents).reduce((acc, curr) => acc + curr, 0) || 0;\r\n\r\n      const criticality = getIssuesCriticality(issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category&& issue.issueSubCategory === subCategory) || []);\r\n\r\n      const isExpanded = expandedNodeNames.includes(rowKey);\r\n\r\n      const subCategoryIssues = issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category && issue.issueSubCategory === subCategory) || [];\r\n      const treeRow: TdProps[\"treeRow\"] = {\r\n          onCollapse: () =>\r\n            setExpandedNodeNames((prevExpanded) => {\r\n              const otherExpandedNodeNames = prevExpanded.filter(\r\n                (name) => name !== rowKey\r\n              );\r\n              return isExpanded\r\n                ? otherExpandedNodeNames\r\n                : [...otherExpandedNodeNames, rowKey];\r\n            }),\r\n          rowIndex,\r\n          props: {\r\n            isExpanded,\r\n            isHidden,\r\n            \"aria-level\": level,\r\n            \"aria-posinset\": posinset,\r\n            \"aria-setsize\": subCategoryIssues.length,\r\n          },\r\n        };\r\n\r\n      const result: React.ReactNode =\r\n          <TreeRowWrapper key={rowKey} row={{ props: treeRow.props }}>\r\n            <Td dataLabel={columnNames.Issue} treeRow={treeRow}>\r\n              {convertLabelToDisplayText(subCategory)}\r\n            </Td>\r\n            <Td dataLabel={columnNames.Criticality}>{criticality}</Td>\r\n            <Td dataLabel={columnNames.lineOfCodeImpacted}>{totalIncidents}</Td>\r\n          </TreeRowWrapper>;\r\n\r\n      results.push(result);\r\n      const childRows = subCategoryIssues.length > 0 ? renderIssues(subCategoryIssues, level + 1, rowIndex + 1, !isExpanded || isHidden) : [];\r\n      results.push(...childRows);\r\n      rowIndex = rowIndex + childRows.length + 1;\r\n      posinset= posinset + 1;\r\n    });\r\n    return results;\r\n  }\r\n\r\n  function renderCategories(issues: TableData[], domain: string) {\r\n    let rowIndex = 0;\r\n    let posinset = 1;\r\n    const isHidden = false;\r\n    const level = 1;\r\n    const results: React.ReactNode[] = [];\r\n    const categories = issues.filter(issue => issue.issueDomain === domain)\r\n    .map(issue => issue.issueCategory).filter((value, index, self) => self.indexOf(value) === index).sort() || [];\r\n\r\n\r\n    categories.forEach((category) => {\r\n\r\n      const rowKey = `${domain}-${category}-${rowIndex}`; \r\n\r\n      const totalIncidents = issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category)\r\n          .map(issue => issue.totalIncidents).reduce((acc, curr) => acc + curr, 0) || 0;\r\n  \r\n      const criticality = getIssuesCriticality(issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category) || []);\r\n\r\n      const subCategories = issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category)\r\n      .map(issue => issue.issueSubCategory).filter((value, index, self) => value && self.indexOf(value) === index).sort();\r\n\r\n      const isExpanded = expandedNodeNames.includes(rowKey);\r\n  \r\n      if (subCategories.length === 0) {\r\n          const categoryIssues = issues.filter(issue => issue.issueDomain === domain && issue.issueCategory === category) || [];\r\n          const treeRow: TdProps[\"treeRow\"] = {\r\n              onCollapse: () =>\r\n                setExpandedNodeNames((prevExpanded) => {\r\n                  const otherExpandedNodeNames = prevExpanded.filter(\r\n                    (name) => name !== rowKey\r\n                  );\r\n                  return isExpanded\r\n                    ? otherExpandedNodeNames\r\n                    : [...otherExpandedNodeNames, rowKey];\r\n                }),\r\n              rowIndex,\r\n              props: {\r\n                isExpanded,\r\n                isHidden,\r\n                \"aria-level\": level,\r\n                \"aria-posinset\": posinset,\r\n                \"aria-setsize\": categoryIssues.length,\r\n              },\r\n            };\r\n\r\n          const result: React.ReactNode =\r\n              <TreeRowWrapper key={rowKey} row={{ props: treeRow.props }}>\r\n                <Td dataLabel={columnNames.Issue} treeRow={treeRow}>\r\n                  {convertLabelToDisplayText(category)}\r\n                </Td>\r\n                <Td dataLabel={columnNames.Criticality}>{criticality}</Td>\r\n                <Td dataLabel={columnNames.lineOfCodeImpacted}>{totalIncidents}</Td>\r\n              </TreeRowWrapper>;\r\n\r\n          results.push(result);\r\n          const childRows = categoryIssues.length > 0 ? renderIssues(categoryIssues, level + 1, rowIndex + 1, !isExpanded || isHidden) : [];\r\n          results.push(...childRows);\r\n          rowIndex = rowIndex + childRows.length + 1;\r\n          posinset= posinset + 1;\r\n      }\r\n      else \r\n      {\r\n          const treeRow: TdProps[\"treeRow\"] = {\r\n              onCollapse: () =>\r\n                setExpandedNodeNames((prevExpanded) => {\r\n                  const otherExpandedNodeNames = prevExpanded.filter(\r\n                    (name) => name !== rowKey\r\n                  );\r\n                  return isExpanded\r\n                    ? otherExpandedNodeNames\r\n                    : [...otherExpandedNodeNames, rowKey];\r\n                }),\r\n              rowIndex,\r\n              props: {\r\n                isExpanded,\r\n                isHidden,\r\n                \"aria-level\": level,\r\n                \"aria-posinset\": posinset,\r\n                \"aria-setsize\": subCategories.length,\r\n              },\r\n            };\r\n\r\n            const result: React.ReactNode =\r\n              <TreeRowWrapper key={rowKey} row={{ props: treeRow.props }}>\r\n                <Td dataLabel={columnNames.Issue} treeRow={treeRow}>\r\n                  {convertLabelToDisplayText(category)}\r\n                </Td>\r\n                <Td dataLabel={columnNames.Criticality}>{criticality}</Td>\r\n                <Td dataLabel={columnNames.lineOfCodeImpacted}>{totalIncidents}</Td>\r\n              </TreeRowWrapper>;\r\n\r\n          results.push(result);\r\n          const childRows = renderSubCategories(category, subCategories, level + 1, rowIndex + 1, !isExpanded || isHidden);\r\n          results.push(...childRows);\r\n          rowIndex = rowIndex + childRows.length + 1;\r\n          posinset= posinset + 1;\r\n      }\r\n    });\r\n    return results;\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Table isTreeTable aria-label=\"Tree table\">\r\n      <Thead>\r\n        <Tr>\r\n          <Th width={30}>{columnNames.Issue}</Th>\r\n          <Th width={15}>{columnNames.Criticality}</Th>\r\n          <Th width={10}>{columnNames.lineOfCodeImpacted}</Th>\r\n        </Tr>\r\n      </Thead>\r\n      <Tbody>{renderCategories(issues, domain)}</Tbody>\r\n    </Table>\r\n\r\n    <Modal\r\n      title={`File ${fileModalData?.file?.name || \"\"}`}\r\n      isOpen={isFileModalOpen && fileModalAction === \"showFile\"}\r\n      onClose={closeFileModal}\r\n      variant=\"default\"\r\n      position=\"top\"\r\n      disableFocusTrap\r\n      actions={[\r\n        <Button key=\"close\" variant=\"primary\" onClick={closeFileModal}>\r\n          Close\r\n        </Button>,\r\n      ]}\r\n    >\r\n      {Object.keys(fileModalData?.file?.incidents || {}).length > 1 ? (\r\n        <Tabs\r\n          activeKey={fileEditorTabId}\r\n          onSelect={(_event, tabKey) =>\r\n            setFileEditorTabId(tabKey as number)}>\r\n          {\r\n            Object.values(fileModalData?.file?.incidents || {}).flatMap((incidents, idx) => (\r\n              <Tab\r\n                key={idx}\r\n                eventKey={idx}\r\n                title={`Line #${fileModalData?.file.ranges[idx * 2]} - #${fileModalData?.file.ranges[idx * 2 + 1]}`} // TODO i18n\r\n              >\r\n                {fileEditorTabId === idx ? (\r\n                  <FileEditor\r\n                    name={fileModalData?.file.name || \"\"}\r\n                    displayName={fileModalData?.file.displayName || \"\"}\r\n                    codeSnip={codeSnip}\r\n                    isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\r\n                    issue={fileModalData?.issue || {} as IssueProcessed}\r\n                    incidents={incidents}\r\n                  />\r\n                ) : null}\r\n              </Tab>))\r\n          }\r\n        </Tabs>\r\n      ) : (\r\n        <FileEditor\r\n          name={fileModalData?.file.name || \"\"}\r\n          displayName={fileModalData?.file.displayName || \"\"}\r\n          codeSnip={codeSnip}\r\n          isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\r\n          issue={fileModalData?.issue || {} as IssueProcessed}\r\n          incidents={fileModalData?.file?.incidents[0] || []} />\r\n      )}\r\n    </Modal>\r\n    </>\r\n  );\r\n};\r\n","import { convertLabelToDisplayText } from \"../../common/utils\";\r\n\r\nimport {\r\n  TableData,\r\n} from \"@app/shared/components\";\r\n\r\nimport { SummaryTable } from \"./summary-table\";\r\n\r\nexport interface IDomainTableProps {\r\n  issues: TableData[];\r\n  domain: string;\r\n}\r\n\r\nexport const DomainTable: React.FC<IDomainTableProps> = ({\r\n  issues,\r\n  domain,\r\n}) => {\r\n  return <>\r\n    <h3 style={{ margin: '32px 0', fontSize: '1.5em' }}>{convertLabelToDisplayText(domain)}</h3>\r\n    <SummaryTable issues={issues} domain={domain} />\r\n  </>\r\n}","\r\nimport React, { useMemo }  from \"react\";\r\n\r\nimport {\r\n  Bullseye,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Title,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\r\n\r\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\r\nimport { useAllApplications } from \"@app/queries/report\";\r\nimport {\r\n  TableData,\r\n} from \"@app/shared/components\";\r\n\r\nimport { DomainTable } from \"./domain-table\";\r\n\r\nexport interface IDomainTableProps {\r\n  applicationId?: string;\r\n}\r\n\r\n\r\nexport const DomainTables: React.FC<IDomainTableProps> = ({\r\n  applicationId\r\n}) => {\r\n    const allApplications = useAllApplications();\r\n\r\n    const issues: TableData[] = useMemo(() => {\r\n    if (!allApplications.data || applicationId === undefined) {\r\n        return [];\r\n    }\r\n\r\n    return applicationId === ALL_APPLICATIONS_ID\r\n        ? allApplications.data?.flatMap((a) => a.issues)\r\n        : allApplications.data?.find((f) => f.id === applicationId)?.issues || [];\r\n    }, [allApplications.data, applicationId]);\r\n\r\n    const domains = issues.map(issue => issue.issueDomain).filter((value, index, self) => value && self.indexOf(value) === index).sort() || [];\r\n\r\n\r\n    return (\r\n        <>\r\n            {applicationId === undefined ? (\r\n              <Bullseye>\r\n                <EmptyState>\r\n                  <EmptyStateIcon icon={ArrowUpIcon} />\r\n                  <Title headingLevel=\"h4\" size=\"lg\">\r\n                    Select an application\r\n                  </Title>\r\n                  <EmptyStateBody>\r\n                    Select an application whose data you want to get access to.\r\n                  </EmptyStateBody>\r\n                </EmptyState>\r\n              </Bullseye>\r\n            ) : \r\n            (\r\n                <>\r\n                    {\r\n                        domains.map((domain, index) => <DomainTable key={domain} issues={issues} domain={domain} />)\r\n                    }\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n}","import React, { useState, useCallback, useMemo } from \"react\";\r\nimport { useDebounce } from \"usehooks-ts\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  Grid,\r\n  GridItem,\r\n  Stack,\r\n  StackItem,\r\n  Truncate,\r\n  ToolbarItem,\r\n  SearchInput,\r\n  CardHeader,\r\n  CardTitle,\r\n  Text,\r\n  TextContent,\r\n  Toolbar,\r\n  ToolbarContent,\r\n  ToolbarToggleGroup,\r\n  ToolbarItemVariant,\r\n} from \"@patternfly/react-core\";\r\n\r\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\r\n\r\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\r\n\r\nimport { useTable, useTableControls } from \"@app/shared/hooks\";\r\n\r\nimport { IssueProcessed } from \"@app/models/api-enriched\";\r\nimport {\r\n  ConditionalTableBody,\r\n  SimpleMarkdown,\r\n  SimplePagination,\r\n} from \"@app/shared/components\";\r\nimport { getMarkdown } from \"@app/utils/utils\";\r\nimport { DispersedFile } from \"@app/models/file\";\r\nimport { useDispersedFiles } from \"@app/queries/report\";\r\n\r\ninterface IIssueOverviewProps {\r\n  issue: IssueProcessed;\r\n  onShowFile: (file: DispersedFile, issue: IssueProcessed) => void;\r\n}\r\n\r\ninterface TableData extends DispersedFile {}\r\n\r\nexport const compareByColumnIndex = (\r\n  a: TableData,\r\n  b: TableData,\r\n  columnIndex?: number\r\n) => {\r\n  switch (columnIndex) {\r\n    case 0: // name\r\n      return a.name.localeCompare(b.name);\r\n    case 1: // count\r\n      return a.totalIncidents - b.totalIncidents;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nexport const IssueOverview: React.FC<IIssueOverviewProps> = ({\r\n  issue,\r\n  onShowFile,\r\n}) => {\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\r\n  const dispersedFilesQuery = useDispersedFiles(issue);\r\n\r\n  const items: TableData[] = useMemo(() => \r\n    dispersedFilesQuery.data?.filter((f) => f.totalIncidents !== 0) || [], \r\n  [dispersedFilesQuery.data])\r\n\r\n  const filterItem = useCallback(\r\n    (item: TableData) => {\r\n      let isFilterTextFilterCompliant = true;\r\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\r\n        isFilterTextFilterCompliant =\r\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\r\n          -1;\r\n      }\r\n      return isFilterTextFilterCompliant;\r\n    },\r\n    [debouncedFilterText]\r\n  );\r\n\r\n  const {\r\n    page: currentPage,\r\n    sortBy: currentSortBy,\r\n    changePage: onPageChange,\r\n    changeSortBy: onChangeSortBy,\r\n  } = useTableControls();\r\n\r\n  const { pageItems, filteredItems } = useTable<TableData>({\r\n    items,\r\n    filterItem,\r\n    currentPage: currentPage,\r\n    currentSortBy: currentSortBy,\r\n    compareToByColumn: compareByColumnIndex,\r\n  });\r\n\r\n  return (\r\n    <Stack hasGutter>\r\n      <StackItem>\r\n        <Grid hasGutter>\r\n          <GridItem md={5}>\r\n            <Toolbar\r\n              className=\"pf-m-toggle-group-container\"\r\n              collapseListedFiltersBreakpoint=\"xl\"\r\n            >\r\n              <ToolbarContent>\r\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\r\n                  <ToolbarItem variant=\"search-filter\">\r\n                    <SearchInput\r\n                      value={filterText}\r\n                      onChange={(_, value) => setFilterText(value)}\r\n                      onClear={() => setFilterText(\"\")}\r\n                    />\r\n                  </ToolbarItem>\r\n                </ToolbarToggleGroup>\r\n                <ToolbarItem\r\n                  variant={ToolbarItemVariant.pagination}\r\n                  align={{ default: \"alignRight\" }}\r\n                >\r\n                  <SimplePagination\r\n                    count={filteredItems.length}\r\n                    params={currentPage}\r\n                    onChange={onPageChange}\r\n                    isTop={true}\r\n                  />\r\n                </ToolbarItem>\r\n              </ToolbarContent>\r\n            </Toolbar>\r\n\r\n            <Table>\r\n              <Thead>\r\n                <Tr>\r\n                  <Th\r\n                    width={80}\r\n                    sort={{\r\n                      columnIndex: 1,\r\n                      sortBy: { ...currentSortBy },\r\n                      onSort: onChangeSortBy,\r\n                    }}\r\n                  >\r\n                    File\r\n                  </Th>\r\n                  <Th width={20}>lineOfCodeImpacted</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <ConditionalTableBody\r\n                isNoData={filteredItems.length === 0}\r\n                numRenderedColumns={10}\r\n              >\r\n                {pageItems?.map((item, rowIndex) => {\r\n                  return (\r\n                    <Tbody key={rowIndex}>\r\n                      <Tr>\r\n                        <Td>\r\n                          <FileLink\r\n                            file={item.name}\r\n                            defaultText={item.displayName}\r\n                            onClick={() => onShowFile(item, issue)}\r\n                          />\r\n                        </Td>\r\n                        <Td>{item.totalIncidents}</Td>\r\n                      </Tr>\r\n                    </Tbody>\r\n                  );\r\n                })}\r\n              </ConditionalTableBody>\r\n            </Table>\r\n\r\n            <SimplePagination\r\n              count={filteredItems.length}\r\n              params={currentPage}\r\n              onChange={onPageChange}\r\n            />\r\n          </GridItem>\r\n          <GridItem md={7}>\r\n            <Card isCompact isFullHeight>\r\n              <CardHeader>\r\n                <CardTitle>\r\n                  <TextContent>\r\n                    <>\r\n                      <Text component=\"h2\">{issue.ruleID}</Text>\r\n                    </>\r\n                  </TextContent>\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <SimpleMarkdown\r\n                  children={getMarkdown(issue.description || \"\", issue.links)}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </GridItem>\r\n        </Grid>\r\n      </StackItem>\r\n    </Stack>\r\n  );\r\n};\r\n\r\ninterface IFileLinkProps {\r\n  file: string;\r\n  defaultText: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const FileLink: React.FC<IFileLinkProps> = ({\r\n  file,\r\n  defaultText,\r\n  onClick,\r\n}) => {\r\n  return (\r\n    <>\r\n      {file ? (\r\n        <Button variant=\"link\" isInline onClick={onClick}>\r\n          <Truncate content={defaultText || file} />\r\n        </Button>\r\n      ) : (\r\n        defaultText\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { useSelectionState } from \"@app/shared/hooks/useSelectionState\";\r\nimport {\r\n  Bullseye,\r\n  Button,\r\n  EmptyState,\r\n  EmptyStateBody,\r\n  EmptyStateIcon,\r\n  Label,\r\n  Modal,\r\n  SearchInput,\r\n  Split,\r\n  SplitItem,\r\n  Tab,\r\n  Tabs,\r\n  Title,\r\n  Toolbar,\r\n  ToolbarChip,\r\n  ToolbarChipGroup,\r\n  ToolbarContent,\r\n  ToolbarFilter,\r\n  ToolbarGroup,\r\n  ToolbarItem,\r\n  ToolbarItemVariant,\r\n  ToolbarToggleGroup,\r\n} from \"@patternfly/react-core\";\r\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\r\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\r\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\r\nimport { useDebounce } from \"usehooks-ts\";\r\n\r\nimport { compareByCategoryFn } from \"@app/models/api-enriched\";\r\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\r\nimport { IssueProcessed } from \"@app/models/api-enriched\";\r\nimport { useAllApplications, useCodeSnip } from \"@app/queries/report\";\r\nimport {\r\n  SimpleSelect,\r\n  OptionWithValue,\r\n  FileEditor,\r\n  ConditionalTableBody,\r\n  SimplePagination,\r\n} from \"@app/shared/components\";\r\nimport {\r\n  useModal,\r\n  useTable,\r\n  useTableControls,\r\n  useToolbar,\r\n} from \"@app/shared/hooks\";\r\n\r\nimport { IssueOverview } from \"./components/issue-overview\";\r\nimport { DispersedFile } from \"@app/models/file\";\r\n\r\nexport interface TableData extends IssueProcessed { }\r\n\r\nconst areRowsEquals = (a: TableData, b: TableData) => {\r\n  return a.id === b.id;\r\n};\r\n\r\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\r\n  if (typeof option === \"string\") {\r\n    const toStringFn = () => option;\r\n    return {\r\n      value: option,\r\n      toString: toStringFn,\r\n      compareTo: (other: string | OptionWithValue) => {\r\n        return typeof other === \"string\"\r\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\r\n          : option === other.value;\r\n      },\r\n    };\r\n  } else {\r\n    const toStringFn = () => option.node as string;\r\n    return {\r\n      value: option.key,\r\n      toString: toStringFn,\r\n      compareTo: (other: string | OptionWithValue) => {\r\n        return typeof other === \"string\"\r\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\r\n          : option.key === other.value;\r\n      },\r\n    };\r\n  }\r\n};\r\n\r\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\r\n  return {\r\n    key: option.value,\r\n    node: option.toString(),\r\n  };\r\n};\r\n\r\nexport const compareByColumnIndex = (\r\n  a: IssueProcessed,\r\n  b: IssueProcessed,\r\n  columnIndex?: number\r\n) => {\r\n  switch (columnIndex) {\r\n    case 1: // name\r\n      return a.id.localeCompare(b.id);\r\n    case 6: // Total incidents\r\n      return a.totalIncidents - b.totalIncidents;\r\n    case 7: // Total storypoints\r\n      return a.totalEffort - b.totalEffort;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\nexport const compareByColumnIndexInsightsMode = (\r\n  a: IssueProcessed,\r\n  b: IssueProcessed,\r\n  columnIndex?: number\r\n) => {\r\n  switch (columnIndex) {\r\n    case 1: // name\r\n      return a.id.localeCompare(b.id);\r\n    case 4: // Total incidents\r\n      return a.totalIncidents - b.totalIncidents;\r\n    case 5: // Total storypoints\r\n      return a.totalEffort - b.totalEffort;\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\n\r\ninterface SelectedFile {\r\n  file: DispersedFile;\r\n  issue: IssueProcessed;\r\n}\r\n\r\nexport interface IViolationsTableProps {\r\n  applicationId?: string;\r\n  insightsMode?: boolean;\r\n}\r\n\r\nexport const ViolationsTable: React.FC<IViolationsTableProps> = ({\r\n  applicationId,\r\n  insightsMode,\r\n}) => {\r\n  const allApplications = useAllApplications();\r\n\r\n\r\n  const [fileEditorTabId, setFileEditorTabId] = useState<number>(0);\r\n  const [selectedFile, setSelectedFile] = useState<DispersedFile>({} as DispersedFile);\r\n\r\n  const codeSnipQuery = useCodeSnip(selectedFile, fileEditorTabId);\r\n\r\n  const codeSnip: string = useMemo(() => codeSnipQuery.data || \"\", [codeSnipQuery.data])\r\n\r\n  // Filters\r\n  const [filterText, setFilterText] = useState(\"\");\r\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\r\n    \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\r\n    ToolbarChip\r\n  >();\r\n\r\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\r\n  const debouncedFilters = useDebounce<\r\n    Map<\r\n      \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\r\n      ToolbarChip[]\r\n    >\r\n  >(filters, 100);\r\n\r\n  const {\r\n    data: fileModalData,\r\n    isOpen: isFileModalOpen,\r\n    action: fileModalAction,\r\n    open: openFileModal,\r\n    close: closeFileModal,\r\n  } = useModal<\"showFile\", SelectedFile>();\r\n\r\n\r\n  const issues: TableData[] = useMemo(() => {\r\n    if (!allApplications.data || applicationId === undefined) {\r\n      return [];\r\n    }\r\n\r\n    return applicationId === ALL_APPLICATIONS_ID\r\n      ? (insightsMode ? allApplications.data?.flatMap((a) => a.insights) : \r\n        allApplications.data?.flatMap((a) => a.issues))\r\n      : (insightsMode ? (allApplications.data?.find((f) => f.id === applicationId)?.insights || []) : \r\n        allApplications.data?.find((f) => f.id === applicationId)?.issues || []);\r\n  }, [allApplications.data, insightsMode, applicationId]);\r\n\r\n  const technologies = useMemo(() => {\r\n    const sources = new Set<string>();\r\n    const targets = new Set<string>();\r\n\r\n    issues.forEach((elem) => {\r\n      elem.sourceTechnologies?.forEach((e) => sources.add(e));\r\n      elem.targetTechnologies?.forEach((e) => targets.add(e));\r\n    });\r\n\r\n    return { source: Array.from(sources), target: Array.from(targets) };\r\n  }, [issues]);\r\n\r\n  const categories = useMemo(() => {\r\n    const allCategories = (issues || []).map((i) => i.criticality);\r\n    return Array.from(new Set(allCategories)).sort(\r\n      compareByCategoryFn((e) => e)\r\n    );\r\n  }, [issues]);\r\n\r\n  const efforts = useMemo(() => {\r\n    const allEfforts = (issues || []).map((e) => e.effort.toString());\r\n    return Array.from(new Set(allEfforts)).sort();\r\n  }, [issues]);\r\n\r\n  const {\r\n    isItemSelected: isRowExpanded,\r\n    toggleItemSelected: toggleRowExpanded,\r\n  } = useSelectionState<TableData>({\r\n    items: issues,\r\n    isEqual: areRowsEquals,\r\n  });\r\n\r\n  const {\r\n    page: currentPage,\r\n    sortBy: currentSortBy,\r\n    changePage: onPageChange,\r\n    changeSortBy: onChangeSortBy,\r\n  } = useTableControls();\r\n\r\n  const filterItem = useCallback(\r\n    (item: TableData) => {\r\n      let isFilterTextFilterCompliant = true;\r\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\r\n        isFilterTextFilterCompliant =\r\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\r\n          -1;\r\n      }\r\n\r\n      let isCategoryFilterCompliant = true;\r\n      const selectedCategories = debouncedFilters.get(\"category\") || [];\r\n      if (selectedCategories.length > 0) {\r\n        isCategoryFilterCompliant = selectedCategories.some(\r\n          (f) => item.criticality === f.key\r\n        );\r\n      }\r\n\r\n      let isLevelOfEffortCompliant = true;\r\n      const selectedLevelOfEfforts = debouncedFilters.get(\"effort\") || [];\r\n      if (selectedLevelOfEfforts.length > 0) {\r\n        isLevelOfEffortCompliant = selectedLevelOfEfforts.some(\r\n          (f) => item.effort.toString() === f.key\r\n        );\r\n      }\r\n\r\n      let isSourceCompliant = true;\r\n      const selectedSources = debouncedFilters.get(\"sourceTechnology\") || [];\r\n      if (selectedSources.length > 0) {\r\n        isSourceCompliant = selectedSources.some((f) => {\r\n          return item.sourceTechnologies?.includes(f.key);\r\n        });\r\n      }\r\n\r\n      let isTargetCompliant = true;\r\n      const selectedTargets = debouncedFilters.get(\"targetTechnology\") || [];\r\n      if (selectedTargets.length > 0) {\r\n        isTargetCompliant = selectedTargets.some((f) => {\r\n          return item.targetTechnologies?.includes(f.key);\r\n        });\r\n      }\r\n\r\n      return (\r\n        isFilterTextFilterCompliant &&\r\n        isCategoryFilterCompliant &&\r\n        isLevelOfEffortCompliant &&\r\n        isSourceCompliant &&\r\n        isTargetCompliant\r\n      );\r\n    },\r\n    [debouncedFilterText, debouncedFilters]\r\n  );\r\n\r\n  const { pageItems, filteredItems } = useTable<TableData>({\r\n    items: issues,\r\n    currentPage: currentPage,\r\n    currentSortBy: currentSortBy,\r\n    compareToByColumn: insightsMode ? compareByColumnIndexInsightsMode : compareByColumnIndex,\r\n    filterItem: filterItem,\r\n  });\r\n\r\n  // Reset pagination when application change\r\n  useEffect(() => {\r\n    onPageChange({ page: 1, perPage: currentPage.perPage });\r\n  }, [\r\n    debouncedFilterText,\r\n    debouncedFilters,\r\n    onPageChange,\r\n    currentPage.perPage,\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        {applicationId === undefined ? (\r\n          <Bullseye>\r\n            <EmptyState>\r\n              <EmptyStateIcon icon={ArrowUpIcon} />\r\n              <Title headingLevel=\"h4\" size=\"lg\">\r\n                Select an application\r\n              </Title>\r\n              <EmptyStateBody>\r\n                Select an application whose data you want to get access to.\r\n              </EmptyStateBody>\r\n            </EmptyState>\r\n          </Bullseye>\r\n        ) : (\r\n          <>\r\n            <Toolbar\r\n              className=\"pf-m-toggle-group-container\"\r\n              collapseListedFiltersBreakpoint=\"xl\"\r\n              clearAllFilters={clearAllFilters}\r\n            >\r\n              <ToolbarContent>\r\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\r\n                  <ToolbarItem variant=\"search-filter\">\r\n                    <SearchInput\r\n                      value={filterText}\r\n                      onChange={(_, value) => setFilterText(value)}\r\n                      onClear={() => setFilterText(\"\")}\r\n                    />\r\n                  </ToolbarItem>\r\n                  {\r\n                    insightsMode ? (<></>) : (\r\n                      <ToolbarGroup variant=\"filter-group\">\r\n                        <ToolbarFilter\r\n                          chips={filters.get(\"category\")}\r\n                          deleteChip={(\r\n                            category: string | ToolbarChipGroup,\r\n                            chip: ToolbarChip | string\r\n                          ) => removeFilter(\"category\", chip)}\r\n                          deleteChipGroup={() => setFilter(\"category\", [])}\r\n                          categoryName={{ key: \"category\", name: \"Category\" }}\r\n                        >\r\n                          <SimpleSelect\r\n                            maxHeight={300}\r\n                            variant=\"checkbox\"\r\n                            aria-label=\"category\"\r\n                            aria-labelledby=\"category\"\r\n                            placeholderText=\"Category\"\r\n                            value={filters.get(\"category\")?.map(toOption)}\r\n                            options={categories.map(toOption)}\r\n                            onChange={(option) => {\r\n                              const optionValue = option as OptionWithValue<string>;\r\n\r\n                              const elementExists = (\r\n                                filters.get(\"category\") || []\r\n                              ).some((f) => f.key === optionValue.value);\r\n                              let newElements: ToolbarChip[];\r\n                              if (elementExists) {\r\n                                newElements = (\r\n                                  filters.get(\"category\") || []\r\n                                ).filter((f) => f.key !== optionValue.value);\r\n                              } else {\r\n                                newElements = [\r\n                                  ...(filters.get(\"category\") || []),\r\n                                  toToolbarChip(optionValue),\r\n                                ];\r\n                              }\r\n\r\n                              setFilter(\"category\", newElements);\r\n                            }}\r\n                            hasInlineFilter\r\n                            onClear={() => setFilter(\"category\", [])}\r\n                          />\r\n                        </ToolbarFilter>\r\n                      </ToolbarGroup>\r\n                    )\r\n                  }\r\n                  {\r\n                    insightsMode ? (<></>) : (\r\n                      <ToolbarGroup variant=\"filter-group\">\r\n                        <ToolbarFilter\r\n                          chips={filters.get(\"effort\")}\r\n                          deleteChip={(\r\n                            category: string | ToolbarChipGroup,\r\n                            chip: ToolbarChip | string\r\n                          ) => removeFilter(\"effort\", chip)}\r\n                          deleteChipGroup={() => setFilter(\"effort\", [])}\r\n                          categoryName={{\r\n                            key: \"effort\",\r\n                            name: \"Effort\",\r\n                          }}\r\n                        >\r\n                          <SimpleSelect\r\n                            maxHeight={300}\r\n                            variant=\"checkbox\"\r\n                            aria-label=\"effort\"\r\n                            aria-labelledby=\"effort\"\r\n                            placeholderText=\"Effort\"\r\n                            value={filters.get(\"effort\")?.map(toOption)}\r\n                            options={efforts.map(toOption)}\r\n                            onChange={(option) => {\r\n                              const optionValue = option as OptionWithValue<string>;\r\n\r\n                              const elementExists = (\r\n                                filters.get(\"effort\") || []\r\n                              ).some((f) => f.key === optionValue.value);\r\n                              let newElements: ToolbarChip[];\r\n                              if (elementExists) {\r\n                                newElements = (filters.get(\"effort\") || []).filter(\r\n                                  (f) => f.key !== optionValue.value\r\n                                );\r\n                              } else {\r\n                                newElements = [\r\n                                  ...(filters.get(\"effort\") || []),\r\n                                  toToolbarChip(optionValue),\r\n                                ];\r\n                              }\r\n\r\n                              setFilter(\"effort\", newElements);\r\n                            }}\r\n                            hasInlineFilter\r\n                            onClear={() => setFilter(\"effort\", [])}\r\n                          />\r\n                        </ToolbarFilter>\r\n                      </ToolbarGroup>\r\n                    )\r\n                  }\r\n                  <ToolbarGroup variant=\"filter-group\">\r\n                    {technologies.source.length > 0 && (\r\n                      <ToolbarFilter\r\n                        chips={filters.get(\"sourceTechnology\")}\r\n                        deleteChip={(\r\n                          category: string | ToolbarChipGroup,\r\n                          chip: ToolbarChip | string\r\n                        ) => removeFilter(\"sourceTechnology\", chip)}\r\n                        deleteChipGroup={() =>\r\n                          setFilter(\"sourceTechnology\", [])\r\n                        }\r\n                        categoryName={{\r\n                          key: \"sourceTechnology\",\r\n                          name: \"Source\",\r\n                        }}\r\n                      >\r\n                        <SimpleSelect\r\n                          maxHeight={300}\r\n                          variant=\"checkbox\"\r\n                          aria-label=\"sourceTechnology\"\r\n                          aria-labelledby=\"sourceTechnology\"\r\n                          placeholderText=\"Source\"\r\n                          value={filters.get(\"sourceTechnology\")?.map(toOption)}\r\n                          options={technologies.source.map(toOption)}\r\n                          onChange={(option) => {\r\n                            const optionValue =\r\n                              option as OptionWithValue<string>;\r\n\r\n                            const elementExists = (\r\n                              filters.get(\"sourceTechnology\") || []\r\n                            ).some((f) => f.key === optionValue.value);\r\n                            let newElements: ToolbarChip[];\r\n                            if (elementExists) {\r\n                              newElements = (\r\n                                filters.get(\"sourceTechnology\") || []\r\n                              ).filter((f) => f.key !== optionValue.value);\r\n                            } else {\r\n                              newElements = [\r\n                                ...(filters.get(\"sourceTechnology\") || []),\r\n                                toToolbarChip(optionValue),\r\n                              ];\r\n                            }\r\n\r\n                            setFilter(\"sourceTechnology\", newElements);\r\n                          }}\r\n                          hasInlineFilter\r\n                          onClear={() => setFilter(\"sourceTechnology\", [])}\r\n                        />\r\n                      </ToolbarFilter>\r\n                    )}\r\n                    {technologies.target.length > 0 && (\r\n                      <ToolbarFilter\r\n                        chips={filters.get(\"targetTechnology\")}\r\n                        deleteChip={(\r\n                          category: string | ToolbarChipGroup,\r\n                          chip: ToolbarChip | string\r\n                        ) => removeFilter(\"targetTechnology\", chip)}\r\n                        deleteChipGroup={() =>\r\n                          setFilter(\"targetTechnology\", [])\r\n                        }\r\n                        categoryName={{\r\n                          key: \"targetTechnology\",\r\n                          name: \"Target\",\r\n                        }}\r\n                      >\r\n                        <SimpleSelect\r\n                          maxHeight={300}\r\n                          variant=\"checkbox\"\r\n                          aria-label=\"targetTechnology\"\r\n                          aria-labelledby=\"targetTechnology\"\r\n                          placeholderText=\"Target\"\r\n                          value={filters.get(\"targetTechnology\")?.map(toOption)}\r\n                          options={technologies.target.map(toOption)}\r\n                          onChange={(option) => {\r\n                            const optionValue =\r\n                              option as OptionWithValue<string>;\r\n\r\n                            const elementExists = (\r\n                              filters.get(\"targetTechnology\") || []\r\n                            ).some((f) => f.key === optionValue.value);\r\n                            let newElements: ToolbarChip[];\r\n                            if (elementExists) {\r\n                              newElements = (\r\n                                filters.get(\"targetTechnology\") || []\r\n                              ).filter((f) => f.key !== optionValue.value);\r\n                            } else {\r\n                              newElements = [\r\n                                ...(filters.get(\"targetTechnology\") || []),\r\n                                toToolbarChip(optionValue),\r\n                              ];\r\n                            }\r\n\r\n                            setFilter(\"targetTechnology\", newElements);\r\n                          }}\r\n                          hasInlineFilter\r\n                          onClear={() => setFilter(\"targetTechnology\", [])}\r\n                        />\r\n                      </ToolbarFilter>\r\n                    )}\r\n                  </ToolbarGroup>\r\n                </ToolbarToggleGroup>\r\n                <ToolbarItem\r\n                  variant={ToolbarItemVariant.pagination}\r\n                  align={{ default: \"alignRight\" }}\r\n                >\r\n                  <SimplePagination\r\n                    count={filteredItems.length}\r\n                    params={currentPage}\r\n                    onChange={onPageChange}\r\n                    isTop={true}\r\n                  />\r\n                </ToolbarItem>\r\n              </ToolbarContent>\r\n            </Toolbar>\r\n\r\n            <Table isExpandable>\r\n              <Thead>\r\n                <Tr>\r\n                  <Th></Th>\r\n                  <Th\r\n                    width={35}\r\n                    sort={{\r\n                      columnIndex: 1,\r\n                      sortBy: { ...currentSortBy },\r\n                      onSort: onChangeSortBy,\r\n                    }}\r\n                  >\r\n                    Issue\r\n                  </Th>\r\n                  {\r\n                    insightsMode ? (<></>) : (<Th width={10}>Category</Th>)\r\n                  }\r\n                  <Th width={10} modifier=\"wrap\">\r\n                    Source\r\n                  </Th>\r\n                  <Th width={10} modifier=\"wrap\">\r\n                    Target\r\n                  </Th>\r\n                  {\r\n                    insightsMode ? (<></>) : (<>\r\n                      <Th width={15} modifier=\"truncate\">\r\n                        Effort\r\n                      </Th></>)\r\n                  }\r\n                  {\r\n                    insightsMode ? (                      \r\n                    <Th\r\n                      width={10}\r\n                      sort={{\r\n                        columnIndex: 6,\r\n                        sortBy: { ...currentSortBy },\r\n                        onSort: onChangeSortBy,\r\n                      }}\r\n                    >\r\n                      Total occurrences\r\n                    </Th>) : (\r\n                      <Th\r\n                        width={10}\r\n                        sort={{\r\n                          columnIndex: 6,\r\n                          sortBy: { ...currentSortBy },\r\n                          onSort: onChangeSortBy,\r\n                        }}\r\n                      >\r\n                        Total incidents\r\n                      </Th>\r\n                    )\r\n                  }\r\n                  {\r\n                    insightsMode ? (<></>) : (\r\n                      <Th\r\n                        width={10}\r\n                        sort={{\r\n                          columnIndex: 7,\r\n                          sortBy: { ...currentSortBy },\r\n                          onSort: onChangeSortBy,\r\n                        }}\r\n                      >\r\n                        Total effort\r\n                      </Th>\r\n                    )\r\n                  }\r\n\r\n                </Tr>\r\n              </Thead>\r\n              <ConditionalTableBody\r\n                isNoData={filteredItems.length === 0}\r\n                numRenderedColumns={10}\r\n              >\r\n                {pageItems?.map((item, rowIndex) => {\r\n                  return (\r\n                    <Tbody key={rowIndex} isExpanded={isRowExpanded(item)}>\r\n                      <Tr>\r\n                        <Td\r\n                          expand={{\r\n                            rowIndex,\r\n                            isExpanded: isRowExpanded(item),\r\n                            onToggle: () => toggleRowExpanded(item),\r\n                          }}\r\n                        />\r\n                        <Td>{item.name}</Td>\r\n                        {insightsMode ? (<></>) : (<Td>{item.criticality}</Td>)}\r\n                        <Td>\r\n                          <Split hasGutter>\r\n                            {item.sourceTechnologies?.map((technology) => (\r\n                              <SplitItem key={technology}>\r\n                                <Label isCompact color=\"blue\">\r\n                                  {technology}\r\n                                </Label>\r\n                              </SplitItem>\r\n                            ))}\r\n                          </Split>\r\n                        </Td>\r\n                        <Td>\r\n                          <Split hasGutter>\r\n                            {item.targetTechnologies?.map((technology) => (\r\n                              <SplitItem key={technology}>\r\n                                <Label isCompact color=\"blue\">\r\n                                  {technology}\r\n                                </Label>\r\n                              </SplitItem>\r\n                            ))}\r\n                          </Split>\r\n                        </Td>\r\n                        {insightsMode ? (<></>) : (<Td>{item.effort.toString()}</Td>)}\r\n                        <Td>{item.totalIncidents}</Td>\r\n                        {insightsMode ? (<></>) : (<Td>{item.totalEffort}</Td>)}\r\n                      </Tr>\r\n                      {isRowExpanded(item) ? (\r\n                        <Tr isExpanded>\r\n                          <Td colSpan={9}>\r\n                            <div className=\"pf-v5-u-m-sm\">\r\n                              <IssueOverview\r\n                                issue={item}\r\n                                onShowFile={(file, issue) => {\r\n                                  openFileModal(\"showFile\", {\r\n                                    file,\r\n                                    issue,\r\n                                  })\r\n                                  setSelectedFile(file)\r\n                                }\r\n                                }\r\n                              />\r\n                            </div>\r\n                          </Td>\r\n                        </Tr>\r\n                      ) : null}\r\n                    </Tbody>\r\n                  );\r\n                })}\r\n              </ConditionalTableBody>\r\n            </Table>\r\n\r\n            <SimplePagination\r\n              count={filteredItems.length}\r\n              params={currentPage}\r\n              onChange={onPageChange}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n\r\n      <Modal\r\n        title={`File ${fileModalData?.file?.name || \"\"}`}\r\n        isOpen={isFileModalOpen && fileModalAction === \"showFile\"}\r\n        onClose={closeFileModal}\r\n        variant=\"default\"\r\n        position=\"top\"\r\n        disableFocusTrap\r\n        actions={[\r\n          <Button key=\"close\" variant=\"primary\" onClick={closeFileModal}>\r\n            Close\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {Object.keys(fileModalData?.file?.incidents || {}).length > 1 ? (\r\n          <Tabs\r\n            activeKey={fileEditorTabId}\r\n            onSelect={(_event, tabKey) =>\r\n              setFileEditorTabId(tabKey as number)}>\r\n            {\r\n              Object.values(fileModalData?.file?.incidents || {}).flatMap((incidents, idx) => (\r\n                <Tab\r\n                  key={idx}\r\n                  eventKey={idx}\r\n                  title={`Line #${fileModalData?.file.ranges[idx * 2]} - #${fileModalData?.file.ranges[idx * 2 + 1]}`} // TODO i18n\r\n                >\r\n                  {fileEditorTabId === idx ? (\r\n                    <FileEditor\r\n                      name={fileModalData?.file.name || \"\"}\r\n                      displayName={fileModalData?.file.displayName || \"\"}\r\n                      codeSnip={codeSnip}\r\n                      isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\r\n                      issue={fileModalData?.issue || {} as IssueProcessed}\r\n                      incidents={incidents}\r\n                    />\r\n                  ) : null}\r\n                </Tab>))\r\n            }\r\n          </Tabs>\r\n        ) : (\r\n          <FileEditor\r\n            name={fileModalData?.file.name || \"\"}\r\n            displayName={fileModalData?.file.displayName || \"\"}\r\n            codeSnip={codeSnip}\r\n            isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\r\n            issue={fileModalData?.issue || {} as IssueProcessed}\r\n            incidents={fileModalData?.file?.incidents[0] || []} />\r\n        )}\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\nexport interface ISelectionStateArgs<T> {\r\n  items: T[];\r\n  initialSelected?: T[];\r\n  isEqual?: (a: T, b: T) => boolean;\r\n  isItemSelectable?: (item: T) => boolean;\r\n  externalState?: [T[], React.Dispatch<React.SetStateAction<T[]>>];\r\n}\r\n\r\nexport interface ISelectionState<T> {\r\n  selectedItems: T[];\r\n  isItemSelected: (item: T) => boolean;\r\n  isItemSelectable: (item: T) => boolean;\r\n  toggleItemSelected: (item: T, isSelecting?: boolean) => void;\r\n  selectMultiple: (items: T[], isSelecting: boolean) => void;\r\n  areAllSelected: boolean;\r\n  selectAll: (isSelecting?: boolean) => void;\r\n  setSelectedItems: (items: T[]) => void;\r\n}\r\n\r\nexport const useSelectionState = <T>({\r\n  items,\r\n  initialSelected = [],\r\n  isEqual = (a, b) => a === b,\r\n  isItemSelectable = () => true,\r\n  externalState,\r\n}: ISelectionStateArgs<T>): ISelectionState<T> => {\r\n  const internalState = React.useState<T[]>(initialSelected);\r\n  const [selectedItems, setSelectedItems] = externalState || internalState;\r\n\r\n  const selectableItems = React.useMemo(() => items.filter(isItemSelectable), [\r\n    items,\r\n    isItemSelectable,\r\n  ]);\r\n\r\n  const isItemSelected = React.useCallback(\r\n    (item: T) => selectedItems.some((i) => isEqual(item, i)),\r\n    [isEqual, selectedItems]\r\n  );\r\n\r\n  // If isItemSelectable changes and a selected item is no longer selectable, deselect it\r\n  React.useEffect(() => {\r\n    if (!selectedItems.every(isItemSelectable)) {\r\n      setSelectedItems(selectedItems.filter(isItemSelectable));\r\n    }\r\n  }, [isItemSelectable, selectedItems, setSelectedItems]);\r\n\r\n  const toggleItemSelected = React.useCallback(\r\n    (item: T, isSelecting = !isItemSelected(item)) => {\r\n      if (isSelecting && isItemSelectable(item)) {\r\n        setSelectedItems([...selectedItems, item]);\r\n      } else {\r\n        setSelectedItems(selectedItems.filter((i) => !isEqual(i, item)));\r\n      }\r\n    },\r\n    [isEqual, isItemSelectable, isItemSelected, selectedItems, setSelectedItems]\r\n  );\r\n\r\n  const selectMultiple = React.useCallback(\r\n    (itemsSubset: T[], isSelecting: boolean) => {\r\n      const otherSelectedItems = selectedItems.filter(\r\n        (selected) => !itemsSubset.some((item) => isEqual(selected, item))\r\n      );\r\n      const itemsToSelect = itemsSubset.filter(isItemSelectable);\r\n      if (isSelecting) {\r\n        setSelectedItems([...otherSelectedItems, ...itemsToSelect]);\r\n      } else {\r\n        setSelectedItems(otherSelectedItems);\r\n      }\r\n    },\r\n    [isEqual, isItemSelectable, selectedItems, setSelectedItems]\r\n  );\r\n\r\n  const selectAll = React.useCallback(\r\n    (isSelecting = true) => setSelectedItems(isSelecting ? selectableItems : []),\r\n    [selectableItems, setSelectedItems]\r\n  );\r\n  const areAllSelected = selectedItems.length === selectableItems.length;\r\n\r\n  // Preserve original order of items\r\n  const selectedItemsInOrder = React.useMemo(() => {\r\n    if (areAllSelected) {\r\n      return selectableItems;\r\n    } else if (selectedItems.length > 0) {\r\n      return selectableItems.filter(isItemSelected);\r\n    }\r\n    return [];\r\n  }, [areAllSelected, isItemSelected, selectableItems, selectedItems.length]);\r\n\r\n  return {\r\n    selectedItems: selectedItemsInOrder,\r\n    isItemSelected,\r\n    isItemSelectable,\r\n    toggleItemSelected,\r\n    selectMultiple,\r\n    areAllSelected,\r\n    selectAll,\r\n    setSelectedItems,\r\n  };\r\n};","import { useCallback, useReducer } from 'react';\r\n\r\nimport { ActionType, createAction, getType } from 'typesafe-actions';\r\n\r\ninterface IOpenAction {\r\n  action: any;\r\n  data: any;\r\n}\r\n\r\nconst openModal = createAction('useModal/action/openModalWithData')<IOpenAction>();\r\nconst closeModal = createAction('useModal/action/startClose')();\r\n\r\n// State\r\ntype State = Readonly<{\r\n  action: any;\r\n  data: any;\r\n  isOpen: boolean;\r\n}>;\r\n\r\nconst defaultState: State = {\r\n  action: undefined,\r\n  data: undefined,\r\n  isOpen: false,\r\n};\r\n\r\n// Reducer\r\n\r\ntype Action = ActionType<typeof openModal | typeof closeModal>;\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case getType(openModal):\r\n      return {\r\n        ...state,\r\n        action: action.payload.action,\r\n        data: action.payload.data,\r\n        isOpen: true,\r\n      };\r\n    case getType(closeModal):\r\n      return {\r\n        ...state,\r\n        action: undefined,\r\n        data: undefined,\r\n        isOpen: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Hook\r\n\r\ninterface HookState<A, T> {\r\n  action?: A;\r\n  data?: T;\r\n  isOpen: boolean;\r\n  open: (action: A, data?: T) => void;\r\n  close: () => void;\r\n  isAction: (action: A) => boolean;\r\n}\r\n\r\nexport const useModal = <A, T = any>(): HookState<A, T> => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    ...defaultState,\r\n  });\r\n\r\n  const openHandler = useCallback((action: A, entity?: T) => {\r\n    dispatch(openModal({ action: action, data: entity }));\r\n  }, []);\r\n\r\n  const closeHandler = useCallback(() => {\r\n    dispatch(closeModal());\r\n  }, []);\r\n\r\n  return {\r\n    action: state.action,\r\n    data: state.data,\r\n    isOpen: state.isOpen,\r\n    open: openHandler,\r\n    close: closeHandler,\r\n    isAction: (action: A) => state.action === action,\r\n  };\r\n};\r\n\r\nexport default useModal;\r\n","import { useMemo } from 'react';\r\n\r\nimport { SortByDirection } from '@patternfly/react-table';\r\n\r\nimport { Page, SortBy } from '../../common/types';\r\n\r\n// Hook\r\n\r\ninterface HookArgs<T> {\r\n  items?: T[];\r\n\r\n  currentSortBy?: SortBy;\r\n  compareToByColumn: (a: T, b: T, columnIndex?: number) => number;\r\n\r\n  currentPage: Page;\r\n  filterItem: (value: T) => boolean;\r\n}\r\n\r\ninterface HookState<T> {\r\n  pageItems: T[];\r\n  filteredItems: T[];\r\n}\r\n\r\nexport const useTable = <T>({\r\n  items,\r\n  currentSortBy,\r\n  currentPage,\r\n  filterItem,\r\n  compareToByColumn,\r\n}: HookArgs<T>): HookState<T> => {\r\n  const state: HookState<T> = useMemo(() => {\r\n    const allItems = [...(items || [])];\r\n\r\n    // Filter\r\n    const filteredItems = allItems.filter(filterItem);\r\n\r\n    //  Sort\r\n    let orderChanged = false;\r\n\r\n    let sortedItems: T[];\r\n    sortedItems = [...filteredItems].sort((a, b) => {\r\n      const comparisonResult = compareToByColumn(a, b, currentSortBy?.index);\r\n      if (comparisonResult !== 0) {\r\n        orderChanged = true;\r\n      }\r\n      return comparisonResult;\r\n    });\r\n\r\n    if (orderChanged && currentSortBy?.direction === SortByDirection.desc) {\r\n      sortedItems = sortedItems.reverse();\r\n    }\r\n\r\n    // Paginate\r\n    const pageItems = sortedItems.slice(\r\n      (currentPage.page - 1) * currentPage.perPage,\r\n      currentPage.page * currentPage.perPage\r\n    );\r\n\r\n    return {\r\n      pageItems,\r\n      filteredItems,\r\n    };\r\n  }, [items, currentPage, currentSortBy, compareToByColumn, filterItem]);\r\n\r\n  return state;\r\n};\r\n","import { useCallback, useReducer } from 'react';\r\n\r\nimport { IExtraColumnData, SortByDirection } from '@patternfly/react-table';\r\nimport { ActionType, createAction, getType } from 'typesafe-actions';\r\n\r\nimport { Page, SortBy } from '../../common/types';\r\n\r\n// Actions\r\n\r\nconst setPage = createAction('useTableControls/pagination/change')<Page>();\r\nconst setSortBy = createAction('useTableControls/sortBy/change')<SortBy>();\r\n\r\n// State\r\ntype State = Readonly<{\r\n  changed: boolean;\r\n\r\n  currentPage: Page;\r\n  sortBy?: SortBy;\r\n}>;\r\n\r\nconst defaultState: State = {\r\n  changed: false,\r\n\r\n  currentPage: {\r\n    page: 1,\r\n    perPage: 10,\r\n  },\r\n  sortBy: undefined,\r\n};\r\n\r\n// Reducer\r\n\r\ntype Action = ActionType<typeof setSortBy | typeof setPage>;\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case getType(setPage):\r\n      return {\r\n        ...state,\r\n        changed: true,\r\n        currentPage: {\r\n          page: action.payload.page,\r\n          perPage: action.payload.perPage,\r\n        },\r\n      };\r\n    case getType(setSortBy):\r\n      return {\r\n        ...state,\r\n        changed: true,\r\n        sortBy: {\r\n          index: action.payload.index,\r\n          direction: action.payload.direction,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Hook\r\n\r\ninterface HookArgs {\r\n  page?: Page;\r\n  sortBy?: SortBy;\r\n}\r\n\r\ninterface HookState {\r\n  page: Page;\r\n  sortBy?: SortBy;\r\n  changePage: (page: { page: number; perPage?: number }) => void;\r\n  changeSortBy: (\r\n    event: React.MouseEvent,\r\n    index: number,\r\n    direction: SortByDirection,\r\n    extraData: IExtraColumnData\r\n  ) => void;\r\n}\r\n\r\nexport const useTableControls = (args?: HookArgs): HookState => {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    ...defaultState,\r\n    currentPage: args && args.page ? { ...args.page } : { ...defaultState.currentPage },\r\n    sortBy: args && args.sortBy ? { ...args.sortBy } : defaultState.sortBy,\r\n  });\r\n\r\n  const handlePageChange = useCallback((newPage: { page: number; perPage?: number }) => {\r\n    dispatch(\r\n      setPage({\r\n        page: newPage.page >= 1 ? newPage.page : 1,\r\n        perPage: newPage.perPage ?? defaultState.currentPage.perPage,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const handleSortByChange = useCallback(\r\n    (\r\n      event: React.MouseEvent,\r\n      index: number,\r\n      direction: SortByDirection,\r\n      extraData: IExtraColumnData\r\n    ) => {\r\n      dispatch(\r\n        setSortBy({\r\n          index: index,\r\n          direction: direction,\r\n        })\r\n      );\r\n    },\r\n    []\r\n  );\r\n\r\n  return {\r\n    page: state.currentPage,\r\n    sortBy: state.sortBy,\r\n    changePage: handlePageChange,\r\n    changeSortBy: handleSortByChange,\r\n  };\r\n};\r\n","import { useState } from 'react';\r\n\r\nimport { ToolbarChip } from '@patternfly/react-core';\r\n\r\nconst getToolbarChipKey = (value: string | ToolbarChip) => {\r\n  return typeof value === 'string' ? value : value.key;\r\n};\r\n\r\n// Hook\r\n\r\ntype FilterType = string | ToolbarChip;\r\n\r\ninterface HookState<K, T> {\r\n  filters: Map<K, T[]>;\r\n  isPresent: boolean;\r\n  addFilter: (key: K, value: T) => void;\r\n  setFilter: (key: K, value: T[]) => void;\r\n  removeFilter: (key: K, value: FilterType | FilterType[]) => void;\r\n  clearAllFilters: () => void;\r\n}\r\n\r\nexport const useToolbar = <K, T extends FilterType>(\r\n  initialValue: Map<K, T[]> | (() => Map<K, T[]>) = new Map()\r\n): HookState<K, T> => {\r\n  const [filters, setFilters] = useState<Map<K, T[]>>(initialValue);\r\n\r\n  const isPresent =\r\n    Array.from(filters.values()).reduce((previous, current) => [...previous, ...current], [])\r\n      .length > 0;\r\n\r\n  const addFilter = (key: K, value: T) => {\r\n    setFilters((current) => {\r\n      const currentChips = current.get(key) || [];\r\n      return new Map(current).set(key, [...currentChips, value]);\r\n    });\r\n  };\r\n\r\n  const setFilter = (key: K, value: T[]) => {\r\n    setFilters((current) => new Map(current).set(key, value));\r\n  };\r\n\r\n  const removeFilter = (key: K, value: FilterType | FilterType[]) => {\r\n    setFilters((current) => {\r\n      let elementsToBeRemoved: FilterType[];\r\n      if (Array.isArray(value)) {\r\n        elementsToBeRemoved = [...value];\r\n      } else {\r\n        elementsToBeRemoved = [value];\r\n      }\r\n\r\n      const newValue = (current.get(key) || []).filter((f) => {\r\n        const fkey = getToolbarChipKey(f);\r\n        return !elementsToBeRemoved.some((r) => {\r\n          const rKey = getToolbarChipKey(r);\r\n          return fkey === rKey;\r\n        });\r\n      });\r\n\r\n      return new Map(current).set(key, newValue);\r\n    });\r\n  };\r\n\r\n  const clearAllFilters = () => {\r\n    setFilters((current) => {\r\n      const newVal = new Map(current);\r\n      Array.from(newVal.keys()).forEach((key) => {\r\n        newVal.set(key, []);\r\n      });\r\n      return newVal;\r\n    });\r\n  };\r\n\r\n  return {\r\n    filters,\r\n    isPresent,\r\n    addFilter,\r\n    setFilter,\r\n    removeFilter,\r\n    clearAllFilters,\r\n  };\r\n};\r\n","import { LinkDto } from \"@app/api/report\";\r\n\r\nexport const getMarkdown = (body: string, links: LinkDto[]): string => {\r\n  const formattedLinks = (links || [])\r\n    .map((link, index) => `${index + 1}. [${link.title}](${link.url})`)\r\n    .join(\"\\n\");\r\n  return [body, formattedLinks].join(\"\\n\");\r\n};\r\n\r\n\r\nexport const capitalizeFirstLetter = (val: string) => {\r\n  if (!val) {\r\n    return val;\r\n  }\r\n\r\n  return val.charAt(0).toUpperCase() + val.slice(1);\r\n};"],"names":["ConditionalRender","_ref","when","then","children","_jsx","_Fragment","SimpleSelect","onChange","options","value","placeholderText","props","isOpen","setIsOpen","useState","Select","onToggle","_","isExpanded","onSelect","selection","variant","selections","map","option","index","SelectOption","concat","toString","compareToByColumn","a","b","columnIndex","name","localeCompare","version","indirect","toOption","toStringFn","compareTo","other","toLowerCase","includes","toLocaleLowerCase","node","key","toToolbarChip","DependenciesTable","_filters$get","_filters$get2","applicationId","allApplicationsQuery","useAllApplications","filterText","setFilterText","filters","setFilter","removeFilter","clearAllFilters","useToolbar","debouncedFilterText","useDebounce","debouncedFilters","dependencies","useMemo","_allApplicationsQuery","_allApplicationsQuery2","_allApplicationsQuery3","data","undefined","ALL_APPLICATIONS_ID","flatMap","find","f","id","allLabels","Array","from","Set","d","labels","page","currentPage","sortBy","currentSortBy","changePage","onPageChange","changeSortBy","onChangeSortBy","useTableControls","filterItem","useCallback","item","isFilterTextFilterCompliant","trim","length","indexOf","isLabelFilterCompliant","selectedLabels","get","some","_item$labels","selectedRelation","pageItems","filteredItems","useTable","items","useEffect","perPage","Bullseye","_jsxs","EmptyState","EmptyStateIcon","icon","ArrowUpIcon","Title","headingLevel","size","EmptyStateBody","Toolbar","className","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","SearchInput","onClear","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","deleteChipGroup","categoryName","maxHeight","optionValue","newElements","filter","hasInlineFilter","ToolbarItemVariant","pagination","align","default","SimplePagination","count","params","isTop","Table","Thead","Tr","Th","width","sort","onSort","modifier","ConditionalTableBody","isNoData","numRenderedColumns","rowIndex","_item$labels2","Tbody","Td","Split","hasGutter","label","SplitItem","Label","isCompact","color","replace","SimpleMarkdown","rest","ReactMarkdown","remarkPlugins","remarkGfm","linkTarget","codeLineRegex","FileEditor","_name$split","displayName","codeSnip","isLoading","incidents","issue","absoluteToRelativeLineNum","lineNum","relativeToAbsoluteLineNum","codeSnipNumberedLines","split","codeSnipTrimmedLines","codeSnipStartLine","forEach","numberedLine","match","isNaN","Number","lineCode","push","join","editorRef","useRef","monacoRef","_monacoRef$current","_editorRef$current","current","editor","getModels","model","dispose","disposables","setDisposables","disposable","fileExtension","pop","onEditorDidMount","monaco","layout","focus","updateOptions","tabSize","newDisposables","addMarkers","_incidents$filter","markers","inc","lineNumber","startLineNumber","endLineNumber","startColumn","endColumn","message","description","severity","MarkerSeverity","Warning","setModelMarkers","hovers","addHover","links","languages","registerHoverProvider","provideHover","position","range","Range","contents","getMarkdown","Drawer","isInline","DrawerContent","panelContent","DrawerPanelContent","isResizable","DrawerHead","Card","isLarge","CardHeader","CardTitle","TextContent","Text","component","ruleID","CardBody","DrawerContentBody","EmptyStateVariant","lg","InfoAltIcon","CodeEditor","isDarkTheme","isLineNumbersVisible","isReadOnly","isMinimapVisible","isLanguageLabelVisible","isDownloadEnabled","title","code","language","Object","values","Language","l","glyphMargin","renderValidationDecorations","lineNumbers","String","height","window","innerHeight","isError","errorEmptyState","noDataEmptyState","error","sm","ExclamationCircleIcon","globalDangerColor200","noData","CubesIcon","colSpan","Spinner","perPageOptions","getPerPage","Pagination","itemCount","onPageInput","onSetPage","onPerPageSelect","widgetId","PaginationVariant","top","bottom","toggleTemplate","ToggleTemplate","LabelDisplayTextMap","convertLabelToDisplayText","CRITIALITIES","getIssuesCriticality","issues","c","criticality","_issue$criticality","criticalityData","compareByColumnIndex","totalIncidents","IssueOverview","onShowFile","dispersedFilesQuery","useDispersedFiles","_dispersedFilesQuery$","Stack","StackItem","Grid","GridItem","md","FileLink","file","defaultText","onClick","isFullHeight","_ref2","Button","Truncate","content","columnNames","SummaryTable","_fileModalData$file","_fileModalData$file2","_fileModalData$file3","_fileModalData$file4","domain","fileEditorTabId","setFileEditorTabId","selectedFile","setSelectedFile","codeSnipQuery","useCodeSnip","fileModalData","isFileModalOpen","action","fileModalAction","open","openFileModal","close","closeFileModal","useModal","expandedNodeNames","setExpandedNodeNames","React","renderIssues","level","isHidden","posinset","results","rowKey","treeRow","onCollapse","prevExpanded","otherExpandedNodeNames","result","TreeRowWrapper","row","dataLabel","childRows","renderIssueOverview","renderSubCategories","subCategories","subCategory","issueDomain","issueCategory","issueSubCategory","reduce","acc","curr","subCategoryIssues","isTreeTable","self","categoryIssues","renderCategories","Modal","onClose","disableFocusTrap","actions","keys","Tabs","activeKey","_event","tabKey","idx","Tab","eventKey","ranges","isFetching","DomainTable","style","margin","fontSize","DomainTables","allApplications","_allApplications$data","_allApplications$data2","_allApplications$data3","domains","areRowsEquals","totalEffort","compareByColumnIndexInsightsMode","ViolationsTable","_filters$get3","_filters$get4","insightsMode","_allApplications$data4","_allApplications$data5","_allApplications$data6","insights","technologies","sources","targets","elem","_elem$sourceTechnolog","_elem$targetTechnolog","sourceTechnologies","e","add","targetTechnologies","source","target","categories","allCategories","i","compareByCategoryFn","efforts","allEfforts","effort","isItemSelected","isRowExpanded","toggleItemSelected","toggleRowExpanded","initialSelected","isEqual","isItemSelectable","externalState","internalState","selectedItems","setSelectedItems","selectableItems","every","arguments","selectMultiple","itemsSubset","isSelecting","otherSelectedItems","selected","itemsToSelect","selectAll","areAllSelected","useSelectionState","isCategoryFilterCompliant","selectedCategories","isLevelOfEffortCompliant","selectedLevelOfEfforts","isSourceCompliant","selectedSources","_item$sourceTechnolog","isTargetCompliant","selectedTargets","_item$targetTechnolog","isExpandable","_item$sourceTechnolog2","_item$targetTechnolog2","expand","technology","openModal","createAction","closeModal","defaultState","reducer","state","type","getType","payload","dispatch","useReducer","openHandler","entity","closeHandler","isAction","sortedItems","orderChanged","comparisonResult","direction","SortByDirection","desc","reverse","slice","setPage","setSortBy","changed","args","handlePageChange","newPage","_newPage$perPage","handleSortByChange","event","extraData","getToolbarChipKey","initialValue","Map","setFilters","isPresent","previous","addFilter","currentChips","set","elementsToBeRemoved","isArray","newValue","fkey","r","rKey","newVal","body","link","url"],"sourceRoot":""}